
SmartLED_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d34  08004d34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d3c  08004d3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08004d50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004d50  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101f8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002535  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  000327b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd4  00000000  00000000  000336e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002684a  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013655  00000000  00000000  0005ab06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb3b  00000000  00000000  0006e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea8  00000000  00000000  0015cc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  00160b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cd4 	.word	0x08004cd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cd4 	.word	0x08004cd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x38>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6493      	str	r3, [r2, #72]	; 0x48
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x38>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2010      	movs	r0, #16
 80004e8:	f000 fcc3 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004ec:	2010      	movs	r0, #16
 80004ee:	f000 fcdc 	bl	8000eaa <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a2a      	ldr	r2, [pc, #168]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 f851 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0xc8>)
 800059a:	f000 fe99 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fe8a 	bl	80012d0 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000800 	.word	0x48000800

080005cc <led_init>:
 */
#include <led_control.h>
#include "tim.h"

void led_init()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0b8      	sub	sp, #224	; 0xe0
 80005d0:	af00      	add	r7, sp, #0
	   * 	x - 1,25 us
	   * 	x = 100
	   * 	100 clock cycles is the time length of one bit for WS2812B LED's
	   *
	   */
	  HAL_TIM_Base_Start(&htim3);
 80005d2:	4826      	ldr	r0, [pc, #152]	; (800066c <led_init+0xa0>)
 80005d4:	f002 fbb6 	bl	8002d44 <HAL_TIM_Base_Start>
	   * 	8 LEDS on strip, GRB colors each 8 bits -> 8 * 24
	   * 	After sending data we want the signal to be HIGH -> + 1
	   * 	Setting duty to 32 -> off
	   * 	Setting duty to 64 -> on
	  */
	  uint8_t test[45 + 7 * 24 + 1] = {0};
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	22d2      	movs	r2, #210	; 0xd2
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fb49 	bl	8004c7a <memset>

	  for (int i = 0; i < 7 * 24; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80005ee:	e00c      	b.n	800060a <led_init+0x3e>
	    test[45 + i] = 64;
 80005f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80005f4:	332d      	adds	r3, #45	; 0x2d
 80005f6:	33e0      	adds	r3, #224	; 0xe0
 80005f8:	443b      	add	r3, r7
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	f803 2ce0 	strb.w	r2, [r3, #-224]
	  for (int i = 0; i < 7 * 24; i++)
 8000600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000604:	3301      	adds	r3, #1
 8000606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800060a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800060e:	2ba7      	cmp	r3, #167	; 0xa7
 8000610:	ddee      	ble.n	80005f0 <led_init+0x24>

	  //HIGH signal at the end
	  test[45 + 7 * 24] = 100;
 8000612:	2364      	movs	r3, #100	; 0x64
 8000614:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5

	  //DMA dynamically updates PWM duty
	  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, &test, sizeof(test));
 8000618:	463a      	mov	r2, r7
 800061a:	23d6      	movs	r3, #214	; 0xd6
 800061c:	2100      	movs	r1, #0
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <led_init+0xa0>)
 8000620:	f002 fc5a 	bl	8002ed8 <HAL_TIM_PWM_Start_DMA>
	  HAL_Delay(1000);
 8000624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000628:	f000 fb24 	bl	8000c74 <HAL_Delay>

	  for (int i = 0; i < 7 * 24; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000632:	e00c      	b.n	800064e <led_init+0x82>
	    test[45 + i] = 32;
 8000634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000638:	332d      	adds	r3, #45	; 0x2d
 800063a:	33e0      	adds	r3, #224	; 0xe0
 800063c:	443b      	add	r3, r7
 800063e:	2220      	movs	r2, #32
 8000640:	f803 2ce0 	strb.w	r2, [r3, #-224]
	  for (int i = 0; i < 7 * 24; i++)
 8000644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000648:	3301      	adds	r3, #1
 800064a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800064e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000652:	2ba7      	cmp	r3, #167	; 0xa7
 8000654:	ddee      	ble.n	8000634 <led_init+0x68>
	  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, &test, sizeof(test));
 8000656:	463a      	mov	r2, r7
 8000658:	23d6      	movs	r3, #214	; 0xd6
 800065a:	2100      	movs	r1, #0
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <led_init+0xa0>)
 800065e:	f002 fc3b 	bl	8002ed8 <HAL_TIM_PWM_Start_DMA>



}
 8000662:	bf00      	nop
 8000664:	37e0      	adds	r7, #224	; 0xe0
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fa82 	bl	8000b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f80b 	bl	8000692 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f7ff ff40 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000680:	f7ff ff20 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000684:	f000 f9c4 	bl	8000a10 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000688:	f000 f8c4 	bl	8000814 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  led_init();
 800068c:	f7ff ff9e 	bl	80005cc <led_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x20>

08000692 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b096      	sub	sp, #88	; 0x58
 8000696:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2244      	movs	r2, #68	; 0x44
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 faea 	bl	8004c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b8:	f000 ffda 	bl	8001670 <HAL_PWREx_ControlVoltageScaling>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c2:	f000 f837 	bl	8000734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e0:	230a      	movs	r3, #10
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 f811 	bl	800171c <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000700:	f000 f818 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2104      	movs	r1, #4
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fbd9 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000728:	f000 f804 	bl	8000734 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3758      	adds	r7, #88	; 0x58
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	; 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	; 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 fa2e 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <DMA1_Channel6_IRQHandler+0x10>)
 80007e2:	f000 fc95 	bl	8001110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000074 	.word	0x20000074

080007f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <SystemInit+0x20>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <SystemInit+0x20>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_TIM3_Init+0xe4>)
 8000848:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <MX_TIM3_Init+0xe8>)
 800084a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_TIM3_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_TIM3_Init+0xe4>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_TIM3_Init+0xe4>)
 800085a:	2263      	movs	r2, #99	; 0x63
 800085c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_TIM3_Init+0xe4>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_TIM3_Init+0xe4>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800086a:	4823      	ldr	r0, [pc, #140]	; (80008f8 <MX_TIM3_Init+0xe4>)
 800086c:	f002 fa12 	bl	8002c94 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000876:	f7ff ff5d 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000884:	4619      	mov	r1, r3
 8000886:	481c      	ldr	r0, [pc, #112]	; (80008f8 <MX_TIM3_Init+0xe4>)
 8000888:	f002 fe5a 	bl	8003540 <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000892:	f7ff ff4f 	bl	8000734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <MX_TIM3_Init+0xe4>)
 8000898:	f002 fabc 	bl	8002e14 <HAL_TIM_PWM_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008a2:	f7ff ff47 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4810      	ldr	r0, [pc, #64]	; (80008f8 <MX_TIM3_Init+0xe4>)
 80008b6:	f003 fc37 	bl	8004128 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008c0:	f7ff ff38 	bl	8000734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c4:	2360      	movs	r3, #96	; 0x60
 80008c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_TIM3_Init+0xe4>)
 80008dc:	f002 fd1c 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008e6:	f7ff ff25 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_TIM3_Init+0xe4>)
 80008ec:	f000 f85a 	bl	80009a4 <HAL_TIM_MspPostInit>

}
 80008f0:	bf00      	nop
 80008f2:	3738      	adds	r7, #56	; 0x38
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000028 	.word	0x20000028
 80008fc:	40000400 	.word	0x40000400

08000900 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <HAL_TIM_Base_MspInit+0x94>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d13b      	bne.n	800098a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_TIM_Base_MspInit+0x98>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <HAL_TIM_Base_MspInit+0x98>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <HAL_TIM_Base_MspInit+0x98>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 800092c:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <HAL_TIM_Base_MspInit+0xa0>)
 800092e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000932:	2205      	movs	r2, #5
 8000934:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000938:	2210      	movs	r2, #16
 800093a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 800094a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800094e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000964:	f000 fabc 	bl	8000ee0 <HAL_DMA_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 800096e:	f7ff fee1 	bl	8000734 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a09      	ldr	r2, [pc, #36]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000982:	639a      	str	r2, [r3, #56]	; 0x38
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_TIM_Base_MspInit+0x9c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40000400 	.word	0x40000400
 8000998:	40021000 	.word	0x40021000
 800099c:	20000074 	.word	0x20000074
 80009a0:	4002006c 	.word	0x4002006c

080009a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <HAL_TIM_MspPostInit+0x64>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d11c      	bne.n	8000a00 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_TIM_MspPostInit+0x68>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_TIM_MspPostInit+0x68>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_TIM_MspPostInit+0x68>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 fc68 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	40021000 	.word	0x40021000

08000a10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_USART2_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a54:	f003 fbf0 	bl	8004238 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f7ff fe69 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000bc 	.word	0x200000bc
 8000a6c:	40004400 	.word	0x40004400

08000a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0ac      	sub	sp, #176	; 0xb0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2288      	movs	r2, #136	; 0x88
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f8f2 	bl	8004c7a <memset>
  if(uartHandle->Instance==USART2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <HAL_UART_MspInit+0xb0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d13b      	bne.n	8000b18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fc35 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab8:	f7ff fe3c 	bl	8000734 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_UART_MspInit+0xb4>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0xb4>)
 8000ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0xb4>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_UART_MspInit+0xb4>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_UART_MspInit+0xb4>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0xb4>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aec:	230c      	movs	r3, #12
 8000aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b04:	2307      	movs	r3, #7
 8000b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fbdc 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	37b0      	adds	r7, #176	; 0xb0
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40004400 	.word	0x40004400
 8000b24:	40021000 	.word	0x40021000

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff fe60 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f004 f899 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fd89 	bl	8000670 <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b6c:	08004d44 	.word	0x08004d44
  ldr r2, =_sbss
 8000b70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b74:	20000148 	.word	0x20000148

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>
	...

08000b7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_Init+0x3c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_Init+0x3c>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b92:	2003      	movs	r0, #3
 8000b94:	f000 f962 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f80f 	bl	8000bbc <HAL_InitTick>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	e001      	b.n	8000bae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000baa:	f7ff fdc9 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d023      	beq.n	8000c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_InitTick+0x70>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x6c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f96d 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10f      	bne.n	8000c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d809      	bhi.n	8000c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 f937 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_InitTick+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e007      	b.n	8000c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e004      	b.n	8000c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e001      	b.n	8000c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000144 	.word	0x20000144

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000144 	.word	0x20000144

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff3e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff31 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e098      	b.n	8001024 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <HAL_DMA_Init+0x150>)
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d80f      	bhi.n	8000f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <HAL_DMA_Init+0x154>)
 8000f06:	4413      	add	r3, r2
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_DMA_Init+0x158>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	009a      	lsls	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_DMA_Init+0x15c>)
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1c:	e00e      	b.n	8000f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HAL_DMA_Init+0x160>)
 8000f26:	4413      	add	r3, r2
 8000f28:	4a43      	ldr	r2, [pc, #268]	; (8001038 <HAL_DMA_Init+0x158>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	009a      	lsls	r2, r3, #2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a42      	ldr	r2, [pc, #264]	; (8001044 <HAL_DMA_Init+0x164>)
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f96:	d039      	beq.n	800100c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	4a27      	ldr	r2, [pc, #156]	; (800103c <HAL_DMA_Init+0x15c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11a      	bne.n	8000fd8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_DMA_Init+0x168>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f003 031c 	and.w	r3, r3, #28
 8000fae:	210f      	movs	r1, #15
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4924      	ldr	r1, [pc, #144]	; (8001048 <HAL_DMA_Init+0x168>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <HAL_DMA_Init+0x168>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	f003 031c 	and.w	r3, r3, #28
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	491d      	ldr	r1, [pc, #116]	; (8001048 <HAL_DMA_Init+0x168>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
 8000fd6:	e019      	b.n	800100c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_DMA_Init+0x16c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	f003 031c 	and.w	r3, r3, #28
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4917      	ldr	r1, [pc, #92]	; (800104c <HAL_DMA_Init+0x16c>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_DMA_Init+0x16c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6859      	ldr	r1, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f003 031c 	and.w	r3, r3, #28
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	4911      	ldr	r1, [pc, #68]	; (800104c <HAL_DMA_Init+0x16c>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40020407 	.word	0x40020407
 8001034:	bffdfff8 	.word	0xbffdfff8
 8001038:	cccccccd 	.word	0xcccccccd
 800103c:	40020000 	.word	0x40020000
 8001040:	bffdfbf8 	.word	0xbffdfbf8
 8001044:	40020400 	.word	0x40020400
 8001048:	400200a8 	.word	0x400200a8
 800104c:	400204a8 	.word	0x400204a8

08001050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_DMA_Start_IT+0x20>
 800106c:	2302      	movs	r3, #2
 800106e:	e04b      	b.n	8001108 <HAL_DMA_Start_IT+0xb8>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d13a      	bne.n	80010fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f8e0 	bl	800126e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 020e 	orr.w	r2, r2, #14
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e00f      	b.n	80010e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0204 	bic.w	r2, r2, #4
 80010d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 020a 	orr.w	r2, r2, #10
 80010e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e005      	b.n	8001106 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001102:	2302      	movs	r3, #2
 8001104:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f003 031c 	and.w	r3, r3, #28
 8001130:	2204      	movs	r2, #4
 8001132:	409a      	lsls	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d026      	beq.n	800118a <HAL_DMA_IRQHandler+0x7a>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d021      	beq.n	800118a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	2b00      	cmp	r3, #0
 8001152:	d107      	bne.n	8001164 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0204 	bic.w	r2, r2, #4
 8001162:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 021c 	and.w	r2, r3, #28
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	2104      	movs	r1, #4
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	2b00      	cmp	r3, #0
 800117e:	d071      	beq.n	8001264 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001188:	e06c      	b.n	8001264 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f003 031c 	and.w	r3, r3, #28
 8001192:	2202      	movs	r2, #2
 8001194:	409a      	lsls	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d02e      	beq.n	80011fc <HAL_DMA_IRQHandler+0xec>
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d029      	beq.n	80011fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10b      	bne.n	80011ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020a 	bic.w	r2, r2, #10
 80011c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 021c 	and.w	r2, r3, #28
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	2102      	movs	r1, #2
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d038      	beq.n	8001264 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011fa:	e033      	b.n	8001264 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f003 031c 	and.w	r3, r3, #28
 8001204:	2208      	movs	r2, #8
 8001206:	409a      	lsls	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d02a      	beq.n	8001266 <HAL_DMA_IRQHandler+0x156>
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d025      	beq.n	8001266 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 020e 	bic.w	r2, r2, #14
 8001228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f003 021c 	and.w	r2, r3, #28
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001264:	bf00      	nop
 8001266:	bf00      	nop
}
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f003 021c 	and.w	r2, r3, #28
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b10      	cmp	r3, #16
 800129e:	d108      	bne.n	80012b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012b0:	e007      	b.n	80012c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	60da      	str	r2, [r3, #12]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e17f      	b.n	80015e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8171 	beq.w	80015da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b03      	cmp	r3, #3
 800137c:	d118      	bne.n	80013b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001384:	2201      	movs	r2, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d017      	beq.n	80013ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80ac 	beq.w	80015da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_GPIO_Init+0x330>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <HAL_GPIO_Init+0x330>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6613      	str	r3, [r2, #96]	; 0x60
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_GPIO_Init+0x330>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149a:	4a5a      	ldr	r2, [pc, #360]	; (8001604 <HAL_GPIO_Init+0x334>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x242>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x23e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x23a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x236>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x232>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	; (8001618 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x22e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x22a>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x244>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x244>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x244>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x244>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001512:	2300      	movs	r3, #0
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001524:	4937      	ldr	r1, [pc, #220]	; (8001604 <HAL_GPIO_Init+0x334>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_GPIO_Init+0x350>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f47f ae78 	bne.w	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48001000 	.word	0x48001000
 8001618:	48001400 	.word	0x48001400
 800161c:	48001800 	.word	0x48001800
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001640:	e002      	b.n	8001648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_PWREx_GetVoltageRange+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000

08001670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167e:	d130      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168c:	d038      	beq.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2232      	movs	r2, #50	; 0x32
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	0c9b      	lsrs	r3, r3, #18
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b4:	e002      	b.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c8:	d102      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f2      	bne.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016dc:	d110      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e00f      	b.n	8001702 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ee:	d007      	beq.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f8:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40007000 	.word	0x40007000
 8001714:	20000000 	.word	0x20000000
 8001718:	431bde83 	.word	0x431bde83

0800171c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e3ca      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172e:	4b97      	ldr	r3, [pc, #604]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4b94      	ldr	r3, [pc, #592]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80e4 	beq.w	8001918 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_RCC_OscConfig+0x4a>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b0c      	cmp	r3, #12
 800175a:	f040 808b 	bne.w	8001874 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b01      	cmp	r3, #1
 8001762:	f040 8087 	bne.w	8001874 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001766:	4b89      	ldr	r3, [pc, #548]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x62>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e3a2      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	4b82      	ldr	r3, [pc, #520]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_RCC_OscConfig+0x7c>
 800178e:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001796:	e005      	b.n	80017a4 <HAL_RCC_OscConfig+0x88>
 8001798:	4b7c      	ldr	r3, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d223      	bcs.n	80017f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fd55 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e383      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a72      	ldr	r2, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b70      	ldr	r3, [pc, #448]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	496d      	ldr	r1, [pc, #436]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017da:	4b6c      	ldr	r3, [pc, #432]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	4968      	ldr	r1, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e025      	b.n	800183c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f0:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4960      	ldr	r1, [pc, #384]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	495b      	ldr	r1, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fd15 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e343      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800183c:	f000 fc4a 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8001840:	4602      	mov	r2, r0
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	4950      	ldr	r1, [pc, #320]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 800184e:	5ccb      	ldrb	r3, [r1, r3]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_RCC_OscConfig+0x278>)
 800185a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_RCC_OscConfig+0x27c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f9ab 	bl	8000bbc <HAL_InitTick>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d052      	beq.n	8001916 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	e327      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d032      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800187c:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a42      	ldr	r2, [pc, #264]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001888:	f7ff f9e8 	bl	8000c5c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001890:	f7ff f9e4 	bl	8000c5c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e310      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a36      	ldr	r2, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4931      	ldr	r1, [pc, #196]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	492c      	ldr	r1, [pc, #176]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e01a      	b.n	8001918 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a29      	ldr	r2, [pc, #164]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ee:	f7ff f9b5 	bl	8000c5c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f6:	f7ff f9b1 	bl	8000c5c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e2dd      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x1da>
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001916:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d074      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d005      	beq.n	8001936 <HAL_RCC_OscConfig+0x21a>
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d10e      	bne.n	800194e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d10b      	bne.n	800194e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d064      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d160      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e2ba      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x24a>
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e026      	b.n	80019b4 <HAL_RCC_OscConfig+0x298>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196e:	d115      	bne.n	800199c <HAL_RCC_OscConfig+0x280>
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a05      	ldr	r2, [pc, #20]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a02      	ldr	r2, [pc, #8]	; (800198c <HAL_RCC_OscConfig+0x270>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x298>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	08004cec 	.word	0x08004cec
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004
 800199c:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a9f      	ldr	r2, [pc, #636]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a9c      	ldr	r2, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f94e 	bl	8000c5c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff f94a 	bl	8000c5c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e276      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	4b92      	ldr	r3, [pc, #584]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2a8>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f93a 	bl	8000c5c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f936 	bl	8000c5c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e262      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x2d0>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d060      	beq.n	8001adc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x310>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d119      	bne.n	8001a5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d116      	bne.n	8001a5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x328>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e23f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	4973      	ldr	r1, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a58:	e040      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d023      	beq.n	8001aaa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a62:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6e      	ldr	r2, [pc, #440]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f8f5 	bl	8000c5c <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff f8f1 	bl	8000c5c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e21d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a88:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	495f      	ldr	r1, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f8d1 	bl	8000c5c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7ff f8cd 	bl	8000c5c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e1f9      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d03c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af0:	4b4b      	ldr	r3, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f8ac 	bl	8000c5c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f8a8 	bl	8000c5c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1d4      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ef      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3ec>
 8001b28:	e01b      	b.n	8001b62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f88f 	bl	8000c5c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b42:	f7ff f88b 	bl	8000c5c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1b7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ef      	bne.n	8001b42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80a6 	beq.w	8001cbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d118      	bne.n	8001bda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f852 	bl	8000c5c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7ff f84e 	bl	8000c5c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e17a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x508>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d108      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4d8>
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf2:	e029      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d115      	bne.n	8001c28 <HAL_RCC_OscConfig+0x50c>
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x504>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40007000 	.word	0x40007000
 8001c28:	4b9c      	ldr	r3, [pc, #624]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a9b      	ldr	r2, [pc, #620]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	4b98      	ldr	r3, [pc, #608]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a97      	ldr	r2, [pc, #604]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d016      	beq.n	8001c7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7ff f804 	bl	8000c5c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff f800 	bl	8000c5c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e12a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ed      	beq.n	8001c58 <HAL_RCC_OscConfig+0x53c>
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7fe ffed 	bl	8000c5c <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe ffe9 	bl	8000c5c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e113      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c9c:	4b7f      	ldr	r3, [pc, #508]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ed      	bne.n	8001c86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb0:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	4a79      	ldr	r2, [pc, #484]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80fe 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	f040 80d0 	bne.w	8001e70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cd0:	4b72      	ldr	r3, [pc, #456]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d130      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d127      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d11f      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d10:	2a07      	cmp	r2, #7
 8001d12:	bf14      	ite	ne
 8001d14:	2201      	movne	r2, #1
 8001d16:	2200      	moveq	r2, #0
 8001d18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d113      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d06e      	beq.n	8001e24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d069      	beq.n	8001e20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0ad      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d68:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d74:	f7fe ff72 	bl	8000c5c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe ff6e 	bl	8000c5c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e09a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9a:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x784>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001daa:	3a01      	subs	r2, #1
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db4:	0212      	lsls	r2, r2, #8
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dbc:	0852      	lsrs	r2, r2, #1
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	0552      	lsls	r2, r2, #21
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dc8:	0852      	lsrs	r2, r2, #1
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	0652      	lsls	r2, r2, #25
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd4:	0912      	lsrs	r2, r2, #4
 8001dd6:	0452      	lsls	r2, r2, #17
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	4930      	ldr	r1, [pc, #192]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df8:	f7fe ff30 	bl	8000c5c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe ff2c 	bl	8000c5c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e058      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e1e:	e050      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d148      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e48:	f7fe ff08 	bl	8000c5c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe ff04 	bl	8000c5c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e030      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x734>
 8001e6e:	e028      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d023      	beq.n	8001ebe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_RCC_OscConfig+0x780>)
 8001e7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7fe feeb 	bl	8000c5c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	e00c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fee7 	bl	8000c5c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d905      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e013      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_OscConfig+0x7b0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ec      	bne.n	8001e8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x7b0>)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4905      	ldr	r1, [pc, #20]	; (8001ecc <HAL_RCC_OscConfig+0x7b0>)
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x7b4>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e001      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	feeefffc 	.word	0xfeeefffc

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0e7      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4970      	ldr	r1, [pc, #448]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b6e      	ldr	r3, [pc, #440]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0cf      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d908      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4960      	ldr	r1, [pc, #384]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04c      	beq.n	8001fec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0a6      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e09a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e08e      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e086      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4943      	ldr	r1, [pc, #268]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fbc:	f7fe fe4e 	bl	8000c5c <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fe4a 	bl	8000c5c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e06e      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002004:	429a      	cmp	r2, r3
 8002006:	d208      	bcs.n	800201a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	492b      	ldr	r1, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d210      	bcs.n	800204a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 0207 	bic.w	r2, r3, #7
 8002030:	4923      	ldr	r1, [pc, #140]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e036      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002088:	f000 f824 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	490b      	ldr	r1, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1fc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fd85 	bl	8000bbc <HAL_InitTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08004cec 	.word	0x08004cec
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x34>
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d121      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d11e      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e005      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002144:	e00a      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d102      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e004      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d101      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800215a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d134      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0xa6>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xac>
 8002178:	e005      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	617b      	str	r3, [r7, #20]
      break;
 800218a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	0e5b      	lsrs	r3, r3, #25
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	3301      	adds	r3, #1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021cc:	69bb      	ldr	r3, [r7, #24]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08004d04 	.word	0x08004d04
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCC_GetPCLK1Freq+0x28>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08004cfc 	.word	0x08004cfc

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002234:	f7ff ffda 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08004cfc 	.word	0x08004cfc

0800225c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f9ee 	bl	8001654 <HAL_PWREx_GetVoltageRange>
 8002278:	6178      	str	r0, [r7, #20]
 800227a:	e014      	b.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a24      	ldr	r2, [pc, #144]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff f9de 	bl	8001654 <HAL_PWREx_GetVoltageRange>
 8002298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d10b      	bne.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d919      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2ba0      	cmp	r3, #160	; 0xa0
 80022b8:	d902      	bls.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ba:	2302      	movs	r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e013      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e010      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d902      	bls.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022cc:	2303      	movs	r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e00a      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d102      	bne.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e004      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d101      	bne.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e4:	2301      	movs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 0207 	bic.w	r2, r3, #7
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002324:	2300      	movs	r3, #0
 8002326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002328:	2300      	movs	r3, #0
 800232a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002334:	2b00      	cmp	r3, #0
 8002336:	d041      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002340:	d02a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002342:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002346:	d824      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800234e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002352:	d81e      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800235c:	d010      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002360:	4b86      	ldr	r3, [pc, #536]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a85      	ldr	r2, [pc, #532]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236c:	e015      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fabb 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3320      	adds	r3, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fba6 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ae:	4973      	ldr	r1, [pc, #460]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d041      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d0:	d02a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023d6:	d824      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e2:	d81e      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d010      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023ee:	e018      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023fc:	e015      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa73 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3320      	adds	r3, #32
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fb5e 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	74fb      	strb	r3, [r7, #19]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002430:	4b52      	ldr	r3, [pc, #328]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243e:	494f      	ldr	r1, [pc, #316]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002446:	e001      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a0 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b3e      	ldr	r3, [pc, #248]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249c:	f7fe fbde 	bl	8000c5c <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fbda 	bl	8000c5c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	74fb      	strb	r3, [r7, #19]
        break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d15c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01f      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d019      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fb99 	bl	8000c5c <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e00b      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fb95 	bl	8000c5c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d902      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	74fb      	strb	r3, [r7, #19]
            break;
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ec      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
 8002578:	e006      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002588:	7c7b      	ldrb	r3, [r7, #17]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b9e      	ldr	r3, [pc, #632]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a9d      	ldr	r2, [pc, #628]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a6:	4b98      	ldr	r3, [pc, #608]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 0203 	bic.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	4994      	ldr	r1, [pc, #592]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 020c 	bic.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	498c      	ldr	r1, [pc, #560]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ea:	4b87      	ldr	r3, [pc, #540]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4983      	ldr	r1, [pc, #524]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800260c:	4b7e      	ldr	r3, [pc, #504]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	497b      	ldr	r1, [pc, #492]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	4972      	ldr	r1, [pc, #456]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002650:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	496a      	ldr	r1, [pc, #424]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	4961      	ldr	r1, [pc, #388]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	4959      	ldr	r1, [pc, #356]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	4948      	ldr	r1, [pc, #288]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d028      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272a:	4937      	ldr	r1, [pc, #220]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273a:	d106      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
 8002748:	e011      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002752:	d10c      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f8c8 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d028      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002798:	d106      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a4:	60d3      	str	r3, [r2, #12]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f899 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f6:	d109      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e014      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f867 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	4928      	ldr	r1, [pc, #160]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285a:	d10d      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f844 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d014      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	74bb      	strb	r3, [r7, #18]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3320      	adds	r3, #32
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f925 	bl	8002ad8 <RCCEx_PLLSAI2_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290a:	4b72      	ldr	r3, [pc, #456]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
       ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
       ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d047      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e044      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d018      	beq.n	8002976 <RCCEx_PLLSAI1_Config+0x86>
 8002944:	2b03      	cmp	r3, #3
 8002946:	d825      	bhi.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0x62>
 800294c:	2b02      	cmp	r3, #2
 800294e:	d009      	beq.n	8002964 <RCCEx_PLLSAI1_Config+0x74>
 8002950:	e020      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002952:	4b60      	ldr	r3, [pc, #384]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11d      	bne.n	800299a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002962:	e01a      	b.n	800299a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002964:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d116      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002974:	e013      	b.n	800299e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002976:	4b57      	ldr	r3, [pc, #348]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002992:	e006      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      break;
 8002998:	e004      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299a:	bf00      	nop
 800299c:	e002      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e000      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	430b      	orrs	r3, r1
 80029c0:	4944      	ldr	r1, [pc, #272]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d17d      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe f940 	bl	8000c5c <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029de:	e009      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e0:	f7fe f93c 	bl	8000c5c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	73fb      	strb	r3, [r7, #15]
        break;
 80029f2:	e005      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ef      	bne.n	80029e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d160      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6892      	ldr	r2, [r2, #8]
 8002a1c:	0211      	lsls	r1, r2, #8
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	0912      	lsrs	r2, r2, #4
 8002a24:	0452      	lsls	r2, r2, #17
 8002a26:	430a      	orrs	r2, r1
 8002a28:	492a      	ldr	r1, [pc, #168]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	610b      	str	r3, [r1, #16]
 8002a2e:	e027      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d112      	bne.n	8002a5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6892      	ldr	r2, [r2, #8]
 8002a46:	0211      	lsls	r1, r2, #8
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6912      	ldr	r2, [r2, #16]
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0552      	lsls	r2, r2, #21
 8002a52:	430a      	orrs	r2, r1
 8002a54:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	610b      	str	r3, [r1, #16]
 8002a5a:	e011      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6952      	ldr	r2, [r2, #20]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f8e6 	bl	8000c5c <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a92:	e009      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a94:	f7fe f8e2 	bl	8000c5c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa6:	e005      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
       ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
       ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d047      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e044      	b.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d018      	beq.n	8002b5e <RCCEx_PLLSAI2_Config+0x86>
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d825      	bhi.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0x62>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d009      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x74>
 8002b38:	e020      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d11d      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4a:	e01a      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e013      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7a:	e006      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e004      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b92:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d167      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe f84c 	bl	8000c5c <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc6:	e009      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc8:	f7fe f848 	bl	8000c5c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d902      	bls.n	8002bdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bda:	e005      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ef      	bne.n	8002bc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d14a      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	0211      	lsls	r1, r2, #8
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	0912      	lsrs	r2, r2, #4
 8002c0c:	0452      	lsls	r2, r2, #17
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	491f      	ldr	r1, [pc, #124]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	614b      	str	r3, [r1, #20]
 8002c16:	e011      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	0211      	lsls	r1, r2, #8
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6912      	ldr	r2, [r2, #16]
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0652      	lsls	r2, r2, #25
 8002c34:	430a      	orrs	r2, r1
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f808 	bl	8000c5c <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c4e:	e009      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c50:	f7fe f804 	bl	8000c5c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	73fb      	strb	r3, [r7, #15]
          break;
 8002c62:	e005      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e049      	b.n	8002d3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd fe20 	bl	8000900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fdec 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d001      	beq.n	8002d5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e047      	b.n	8002dec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <HAL_TIM_Base_Start+0xb4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01d      	beq.n	8002daa <HAL_TIM_Base_Start+0x66>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d018      	beq.n	8002daa <HAL_TIM_Base_Start+0x66>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_TIM_Base_Start+0xb8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_TIM_Base_Start+0x66>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_Base_Start+0xbc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <HAL_TIM_Base_Start+0x66>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_TIM_Base_Start+0xc0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_TIM_Base_Start+0x66>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_Base_Start+0xc4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIM_Base_Start+0x66>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_Base_Start+0xc8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d115      	bne.n	8002dd6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_TIM_Base_Start+0xcc>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b06      	cmp	r3, #6
 8002dba:	d015      	beq.n	8002de8 <HAL_TIM_Base_Start+0xa4>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc2:	d011      	beq.n	8002de8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd4:	e008      	b.n	8002de8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e000      	b.n	8002dea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012c00 	.word	0x40012c00
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	00010007 	.word	0x00010007

08002e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e049      	b.n	8002eba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f841 	bl	8002ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fd2c 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e03c      	b.n	8002f7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d109      	bne.n	8002f1e <HAL_TIM_PWM_Start_DMA+0x46>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e02f      	b.n	8002f7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d109      	bne.n	8002f38 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e022      	b.n	8002f7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d109      	bne.n	8002f52 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e015      	b.n	8002f7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d109      	bne.n	8002f6c <HAL_TIM_PWM_Start_DMA+0x94>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e008      	b.n	8002f7e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
 8002f84:	e1ab      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e03c      	b.n	800301a <HAL_TIM_PWM_Start_DMA+0x142>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start_DMA+0xe2>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e02f      	b.n	800301a <HAL_TIM_PWM_Start_DMA+0x142>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e022      	b.n	800301a <HAL_TIM_PWM_Start_DMA+0x142>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d109      	bne.n	8002fee <HAL_TIM_PWM_Start_DMA+0x116>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	e015      	b.n	800301a <HAL_TIM_PWM_Start_DMA+0x142>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d109      	bne.n	8003008 <HAL_TIM_PWM_Start_DMA+0x130>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e008      	b.n	800301a <HAL_TIM_PWM_Start_DMA+0x142>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d034      	beq.n	8003088 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_TIM_PWM_Start_DMA+0x152>
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e157      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <HAL_TIM_PWM_Start_DMA+0x166>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303c:	e026      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start_DMA+0x176>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304c:	e01e      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start_DMA+0x186>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	e016      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start_DMA+0x196>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800306c:	e00e      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b10      	cmp	r3, #16
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	e006      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003086:	e001      	b.n	800308c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e128      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	f200 80ae 	bhi.w	80031f0 <HAL_TIM_PWM_Start_DMA+0x318>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	080031f1 	.word	0x080031f1
 80030a4:	080031f1 	.word	0x080031f1
 80030a8:	080031f1 	.word	0x080031f1
 80030ac:	08003119 	.word	0x08003119
 80030b0:	080031f1 	.word	0x080031f1
 80030b4:	080031f1 	.word	0x080031f1
 80030b8:	080031f1 	.word	0x080031f1
 80030bc:	08003161 	.word	0x08003161
 80030c0:	080031f1 	.word	0x080031f1
 80030c4:	080031f1 	.word	0x080031f1
 80030c8:	080031f1 	.word	0x080031f1
 80030cc:	080031a9 	.word	0x080031a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	4a84      	ldr	r2, [pc, #528]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	4a83      	ldr	r2, [pc, #524]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x414>)
 80030de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	4a82      	ldr	r2, [pc, #520]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x418>)
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3334      	adds	r3, #52	; 0x34
 80030f4:	461a      	mov	r2, r3
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	f7fd ffaa 	bl	8001050 <HAL_DMA_Start_IT>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0eb      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	60da      	str	r2, [r3, #12]
      break;
 8003116:	e06e      	b.n	80031f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	4a72      	ldr	r2, [pc, #456]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	4a71      	ldr	r2, [pc, #452]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x414>)
 8003126:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	4a70      	ldr	r2, [pc, #448]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800312e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3338      	adds	r3, #56	; 0x38
 800313c:	461a      	mov	r2, r3
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	f7fd ff86 	bl	8001050 <HAL_DMA_Start_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0c7      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800315c:	60da      	str	r2, [r3, #12]
      break;
 800315e:	e04a      	b.n	80031f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a60      	ldr	r2, [pc, #384]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4a5f      	ldr	r2, [pc, #380]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x414>)
 800316e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	333c      	adds	r3, #60	; 0x3c
 8003184:	461a      	mov	r2, r3
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	f7fd ff62 	bl	8001050 <HAL_DMA_Start_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0a3      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a4:	60da      	str	r2, [r3, #12]
      break;
 80031a6:	e026      	b.n	80031f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a4e      	ldr	r2, [pc, #312]	; (80032e8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a4d      	ldr	r2, [pc, #308]	; (80032ec <HAL_TIM_PWM_Start_DMA+0x414>)
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_TIM_PWM_Start_DMA+0x418>)
 80031be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3340      	adds	r3, #64	; 0x40
 80031cc:	461a      	mov	r2, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	f7fd ff3e 	bl	8001050 <HAL_DMA_Start_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07f      	b.n	80032de <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ec:	60da      	str	r2, [r3, #12]
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
      break;
 80031f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d16f      	bne.n	80032dc <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2201      	movs	r2, #1
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 ff69 	bl	80040dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a39      	ldr	r2, [pc, #228]	; (80032f4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_TIM_PWM_Start_DMA+0x364>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a37      	ldr	r2, [pc, #220]	; (80032f8 <HAL_TIM_PWM_Start_DMA+0x420>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_TIM_PWM_Start_DMA+0x364>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a36      	ldr	r2, [pc, #216]	; (80032fc <HAL_TIM_PWM_Start_DMA+0x424>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_TIM_PWM_Start_DMA+0x364>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a34      	ldr	r2, [pc, #208]	; (8003300 <HAL_TIM_PWM_Start_DMA+0x428>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_TIM_PWM_Start_DMA+0x364>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a33      	ldr	r2, [pc, #204]	; (8003304 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_TIM_PWM_Start_DMA+0x368>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_TIM_PWM_Start_DMA+0x36a>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d01d      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d018      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x3c4>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a26      	ldr	r2, [pc, #152]	; (8003308 <HAL_TIM_PWM_Start_DMA+0x430>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <HAL_TIM_PWM_Start_DMA+0x434>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00e      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x3c4>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_TIM_PWM_Start_DMA+0x420>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_TIM_PWM_Start_DMA+0x424>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d115      	bne.n	80032c8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d015      	beq.n	80032da <HAL_TIM_PWM_Start_DMA+0x402>
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d011      	beq.n	80032da <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	e008      	b.n	80032da <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e000      	b.n	80032dc <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	080037a1 	.word	0x080037a1
 80032ec:	08003849 	.word	0x08003849
 80032f0:	0800370f 	.word	0x0800370f
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40013400 	.word	0x40013400
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400
 8003304:	40014800 	.word	0x40014800
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	00010007 	.word	0x00010007

08003318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e0ff      	b.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b14      	cmp	r3, #20
 8003342:	f200 80f0 	bhi.w	8003526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	080033a1 	.word	0x080033a1
 8003350:	08003527 	.word	0x08003527
 8003354:	08003527 	.word	0x08003527
 8003358:	08003527 	.word	0x08003527
 800335c:	080033e1 	.word	0x080033e1
 8003360:	08003527 	.word	0x08003527
 8003364:	08003527 	.word	0x08003527
 8003368:	08003527 	.word	0x08003527
 800336c:	08003423 	.word	0x08003423
 8003370:	08003527 	.word	0x08003527
 8003374:	08003527 	.word	0x08003527
 8003378:	08003527 	.word	0x08003527
 800337c:	08003463 	.word	0x08003463
 8003380:	08003527 	.word	0x08003527
 8003384:	08003527 	.word	0x08003527
 8003388:	08003527 	.word	0x08003527
 800338c:	080034a5 	.word	0x080034a5
 8003390:	08003527 	.word	0x08003527
 8003394:	08003527 	.word	0x08003527
 8003398:	08003527 	.word	0x08003527
 800339c:	080034e5 	.word	0x080034e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fb28 	bl	80039fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
      break;
 80033de:	e0a5      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fb98 	bl	8003b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e084      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fc01 	bl	8003c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0208 	orr.w	r2, r2, #8
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0204 	bic.w	r2, r2, #4
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
      break;
 8003460:	e064      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fc69 	bl	8003d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
      break;
 80034a2:	e043      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fcb2 	bl	8003e14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034e2:	e023      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fcf6 	bl	8003edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003524:	e002      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e0b6      	b.n	80036ca <HAL_TIM_ConfigClockSource+0x18a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003598:	d03e      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0xd8>
 800359a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359e:	f200 8087 	bhi.w	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a6:	f000 8086 	beq.w	80036b6 <HAL_TIM_ConfigClockSource+0x176>
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ae:	d87f      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d01a      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xaa>
 80035b4:	2b70      	cmp	r3, #112	; 0x70
 80035b6:	d87b      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035b8:	2b60      	cmp	r3, #96	; 0x60
 80035ba:	d050      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x11e>
 80035bc:	2b60      	cmp	r3, #96	; 0x60
 80035be:	d877      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035c0:	2b50      	cmp	r3, #80	; 0x50
 80035c2:	d03c      	beq.n	800363e <HAL_TIM_ConfigClockSource+0xfe>
 80035c4:	2b50      	cmp	r3, #80	; 0x50
 80035c6:	d873      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d058      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x13e>
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d86f      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035d0:	2b30      	cmp	r3, #48	; 0x30
 80035d2:	d064      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x15e>
 80035d4:	2b30      	cmp	r3, #48	; 0x30
 80035d6:	d86b      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d060      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x15e>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d867      	bhi.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d05c      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x15e>
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d05a      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x15e>
 80035e8:	e062      	b.n	80036b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035fa:	f000 fd4f 	bl	800409c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800360c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	609a      	str	r2, [r3, #8]
      break;
 8003616:	e04f      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003628:	f000 fd38 	bl	800409c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363a:	609a      	str	r2, [r3, #8]
      break;
 800363c:	e03c      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364a:	461a      	mov	r2, r3
 800364c:	f000 fcac 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2150      	movs	r1, #80	; 0x50
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fd05 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 800365c:	e02c      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800366a:	461a      	mov	r2, r3
 800366c:	f000 fccb 	bl	8004006 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2160      	movs	r1, #96	; 0x60
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fcf5 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 800367c:	e01c      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	461a      	mov	r2, r3
 800368c:	f000 fc8c 	bl	8003fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2140      	movs	r1, #64	; 0x40
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fce5 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 800369c:	e00c      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f000 fcdc 	bl	8004066 <TIM_ITRx_SetConfig>
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e000      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d107      	bne.n	8003736 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	e02a      	b.n	800378c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d107      	bne.n	8003750 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2202      	movs	r2, #2
 8003744:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374e:	e01d      	b.n	800378c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	d107      	bne.n	800376a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2204      	movs	r2, #4
 800375e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003768:	e010      	b.n	800378c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2208      	movs	r2, #8
 8003778:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003782:	e003      	b.n	800378c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f7ff ffb4 	bl	80036fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10b      	bne.n	80037d0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d136      	bne.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ce:	e031      	b.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10b      	bne.n	80037f2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d125      	bne.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f0:	e020      	b.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10b      	bne.n	8003814 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2204      	movs	r2, #4
 8003800:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d114      	bne.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003812:	e00f      	b.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d10a      	bne.n	8003834 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2208      	movs	r2, #8
 8003822:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d103      	bne.n	8003834 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff ff4c 	bl	80036d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d103      	bne.n	8003868 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	771a      	strb	r2, [r3, #28]
 8003866:	e019      	b.n	800389c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2202      	movs	r2, #2
 8003876:	771a      	strb	r2, [r3, #28]
 8003878:	e010      	b.n	800389c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d103      	bne.n	800388c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2204      	movs	r2, #4
 8003888:	771a      	strb	r2, [r3, #28]
 800388a:	e007      	b.n	800389c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d102      	bne.n	800389c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2208      	movs	r2, #8
 800389a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff ff22 	bl	80036e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a46      	ldr	r2, [pc, #280]	; (80039dc <TIM_Base_SetConfig+0x12c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ce:	d00f      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a43      	ldr	r2, [pc, #268]	; (80039e0 <TIM_Base_SetConfig+0x130>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <TIM_Base_SetConfig+0x134>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a41      	ldr	r2, [pc, #260]	; (80039e8 <TIM_Base_SetConfig+0x138>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a40      	ldr	r2, [pc, #256]	; (80039ec <TIM_Base_SetConfig+0x13c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a35      	ldr	r2, [pc, #212]	; (80039dc <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01f      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d01b      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a32      	ldr	r2, [pc, #200]	; (80039e0 <TIM_Base_SetConfig+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d017      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <TIM_Base_SetConfig+0x134>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <TIM_Base_SetConfig+0x138>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00f      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <TIM_Base_SetConfig+0x13c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2e      	ldr	r2, [pc, #184]	; (80039f0 <TIM_Base_SetConfig+0x140>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <TIM_Base_SetConfig+0x144>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <TIM_Base_SetConfig+0x148>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <TIM_Base_SetConfig+0x12c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0xf8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <TIM_Base_SetConfig+0x13c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0xf8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <TIM_Base_SetConfig+0x140>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0xf8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <TIM_Base_SetConfig+0x144>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0xf8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <TIM_Base_SetConfig+0x148>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	611a      	str	r2, [r3, #16]
  }
}
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40013400 	.word	0x40013400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800

080039fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f023 0201 	bic.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0302 	bic.w	r3, r3, #2
 8003a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a2c      	ldr	r2, [pc, #176]	; (8003b08 <TIM_OC1_SetConfig+0x10c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00f      	beq.n	8003a7c <TIM_OC1_SetConfig+0x80>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	; (8003b0c <TIM_OC1_SetConfig+0x110>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_OC1_SetConfig+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <TIM_OC1_SetConfig+0x114>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_OC1_SetConfig+0x80>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <TIM_OC1_SetConfig+0x118>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_OC1_SetConfig+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <TIM_OC1_SetConfig+0x11c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <TIM_OC1_SetConfig+0x10c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00f      	beq.n	8003abe <TIM_OC1_SetConfig+0xc2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <TIM_OC1_SetConfig+0x110>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_OC1_SetConfig+0xc2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <TIM_OC1_SetConfig+0x114>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_OC1_SetConfig+0xc2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <TIM_OC1_SetConfig+0x118>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_OC1_SetConfig+0xc2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <TIM_OC1_SetConfig+0x11c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d111      	bne.n	8003ae2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	621a      	str	r2, [r3, #32]
}
 8003afc:	bf00      	nop
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40013400 	.word	0x40013400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800

08003b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 0210 	bic.w	r2, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0320 	bic.w	r3, r3, #32
 8003b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <TIM_OC2_SetConfig+0x100>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC2_SetConfig+0x6c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <TIM_OC2_SetConfig+0x104>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10d      	bne.n	8003ba4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <TIM_OC2_SetConfig+0x100>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_OC2_SetConfig+0xb0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <TIM_OC2_SetConfig+0x104>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_OC2_SetConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <TIM_OC2_SetConfig+0x108>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_OC2_SetConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <TIM_OC2_SetConfig+0x10c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC2_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <TIM_OC2_SetConfig+0x110>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d113      	bne.n	8003bf4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40013400 	.word	0x40013400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800

08003c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <TIM_OC3_SetConfig+0xfc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_OC3_SetConfig+0x6a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <TIM_OC3_SetConfig+0x100>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10d      	bne.n	8003cb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <TIM_OC3_SetConfig+0xfc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_OC3_SetConfig+0xae>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <TIM_OC3_SetConfig+0x100>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_OC3_SetConfig+0xae>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1a      	ldr	r2, [pc, #104]	; (8003d34 <TIM_OC3_SetConfig+0x104>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_OC3_SetConfig+0xae>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <TIM_OC3_SetConfig+0x108>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0xae>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <TIM_OC3_SetConfig+0x10c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40014400 	.word	0x40014400
 8003d3c:	40014800 	.word	0x40014800

08003d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	031b      	lsls	r3, r3, #12
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <TIM_OC4_SetConfig+0xc0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00f      	beq.n	8003dc4 <TIM_OC4_SetConfig+0x84>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <TIM_OC4_SetConfig+0xc4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00b      	beq.n	8003dc4 <TIM_OC4_SetConfig+0x84>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <TIM_OC4_SetConfig+0xc8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <TIM_OC4_SetConfig+0x84>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <TIM_OC4_SetConfig+0xcc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_OC4_SetConfig+0x84>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <TIM_OC4_SetConfig+0xd0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d109      	bne.n	8003dd8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	041b      	lsls	r3, r3, #16
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <TIM_OC5_SetConfig+0xb4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00f      	beq.n	8003e8e <TIM_OC5_SetConfig+0x7a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <TIM_OC5_SetConfig+0xb8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_OC5_SetConfig+0x7a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <TIM_OC5_SetConfig+0xbc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_OC5_SetConfig+0x7a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <TIM_OC5_SetConfig+0xc0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_OC5_SetConfig+0x7a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <TIM_OC5_SetConfig+0xc4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d109      	bne.n	8003ea2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	40014400 	.word	0x40014400
 8003ed8:	40014800 	.word	0x40014800

08003edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	051b      	lsls	r3, r3, #20
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <TIM_OC6_SetConfig+0xb8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_OC6_SetConfig+0x7c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <TIM_OC6_SetConfig+0xbc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_OC6_SetConfig+0x7c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a16      	ldr	r2, [pc, #88]	; (8003f9c <TIM_OC6_SetConfig+0xc0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_OC6_SetConfig+0x7c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <TIM_OC6_SetConfig+0xc4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_OC6_SetConfig+0x7c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <TIM_OC6_SetConfig+0xc8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d109      	bne.n	8003f6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40013400 	.word	0x40013400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800

08003fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 030a 	bic.w	r3, r3, #10
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004006:	b480      	push	{r7}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 0210 	bic.w	r2, r3, #16
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	031b      	lsls	r3, r3, #12
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004042:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	f043 0307 	orr.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	431a      	orrs	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2201      	movs	r2, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800413c:	2302      	movs	r3, #2
 800413e:	e068      	b.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2e      	ldr	r2, [pc, #184]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2d      	ldr	r2, [pc, #180]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d108      	bne.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800417a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d018      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a13      	ldr	r2, [pc, #76]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10c      	bne.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800
 8004230:	40000c00 	.word	0x40000c00
 8004234:	40014000 	.word	0x40014000

08004238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e040      	b.n	80042cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc fc08 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fae0 	bl	8004844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f825 	bl	80042d4 <UART_SetConfig>
 800428a:	4603      	mov	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e01b      	b.n	80042cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb5f 	bl	8004988 <UART_CheckIdleState>
 80042ca:	4603      	mov	r3, r0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4ba4      	ldr	r3, [pc, #656]	; (8004594 <UART_SetConfig+0x2c0>)
 8004304:	4013      	ands	r3, r2
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800430c:	430b      	orrs	r3, r1
 800430e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a99      	ldr	r2, [pc, #612]	; (8004598 <UART_SetConfig+0x2c4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d004      	beq.n	8004340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	4313      	orrs	r3, r2
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a90      	ldr	r2, [pc, #576]	; (800459c <UART_SetConfig+0x2c8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d126      	bne.n	80043ac <UART_SetConfig+0xd8>
 800435e:	4b90      	ldr	r3, [pc, #576]	; (80045a0 <UART_SetConfig+0x2cc>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b03      	cmp	r3, #3
 800436a:	d81b      	bhi.n	80043a4 <UART_SetConfig+0xd0>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0xa0>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004385 	.word	0x08004385
 8004378:	08004395 	.word	0x08004395
 800437c:	0800438d 	.word	0x0800438d
 8004380:	0800439d 	.word	0x0800439d
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e116      	b.n	80045ba <UART_SetConfig+0x2e6>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e112      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e10e      	b.n	80045ba <UART_SetConfig+0x2e6>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e10a      	b.n	80045ba <UART_SetConfig+0x2e6>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e106      	b.n	80045ba <UART_SetConfig+0x2e6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a7c      	ldr	r2, [pc, #496]	; (80045a4 <UART_SetConfig+0x2d0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d138      	bne.n	8004428 <UART_SetConfig+0x154>
 80043b6:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <UART_SetConfig+0x2cc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d82d      	bhi.n	8004420 <UART_SetConfig+0x14c>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0xf8>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004401 	.word	0x08004401
 80043d0:	08004421 	.word	0x08004421
 80043d4:	08004421 	.word	0x08004421
 80043d8:	08004421 	.word	0x08004421
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004421 	.word	0x08004421
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004421 	.word	0x08004421
 80043f4:	08004421 	.word	0x08004421
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004419 	.word	0x08004419
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004406:	e0d8      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004408:	2302      	movs	r3, #2
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440e:	e0d4      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004410:	2304      	movs	r3, #4
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004416:	e0d0      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004418:	2308      	movs	r3, #8
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e0cc      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004420:	2310      	movs	r3, #16
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e0c8      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5e      	ldr	r2, [pc, #376]	; (80045a8 <UART_SetConfig+0x2d4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d125      	bne.n	800447e <UART_SetConfig+0x1aa>
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <UART_SetConfig+0x2cc>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d016      	beq.n	800446e <UART_SetConfig+0x19a>
 8004440:	2b30      	cmp	r3, #48	; 0x30
 8004442:	d818      	bhi.n	8004476 <UART_SetConfig+0x1a2>
 8004444:	2b20      	cmp	r3, #32
 8004446:	d00a      	beq.n	800445e <UART_SetConfig+0x18a>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d814      	bhi.n	8004476 <UART_SetConfig+0x1a2>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <UART_SetConfig+0x182>
 8004450:	2b10      	cmp	r3, #16
 8004452:	d008      	beq.n	8004466 <UART_SetConfig+0x192>
 8004454:	e00f      	b.n	8004476 <UART_SetConfig+0x1a2>
 8004456:	2300      	movs	r3, #0
 8004458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445c:	e0ad      	b.n	80045ba <UART_SetConfig+0x2e6>
 800445e:	2302      	movs	r3, #2
 8004460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004464:	e0a9      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004466:	2304      	movs	r3, #4
 8004468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446c:	e0a5      	b.n	80045ba <UART_SetConfig+0x2e6>
 800446e:	2308      	movs	r3, #8
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004474:	e0a1      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004476:	2310      	movs	r3, #16
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e09d      	b.n	80045ba <UART_SetConfig+0x2e6>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <UART_SetConfig+0x2d8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d125      	bne.n	80044d4 <UART_SetConfig+0x200>
 8004488:	4b45      	ldr	r3, [pc, #276]	; (80045a0 <UART_SetConfig+0x2cc>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004492:	2bc0      	cmp	r3, #192	; 0xc0
 8004494:	d016      	beq.n	80044c4 <UART_SetConfig+0x1f0>
 8004496:	2bc0      	cmp	r3, #192	; 0xc0
 8004498:	d818      	bhi.n	80044cc <UART_SetConfig+0x1f8>
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d00a      	beq.n	80044b4 <UART_SetConfig+0x1e0>
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d814      	bhi.n	80044cc <UART_SetConfig+0x1f8>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <UART_SetConfig+0x1d8>
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d008      	beq.n	80044bc <UART_SetConfig+0x1e8>
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x1f8>
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	e082      	b.n	80045ba <UART_SetConfig+0x2e6>
 80044b4:	2302      	movs	r3, #2
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ba:	e07e      	b.n	80045ba <UART_SetConfig+0x2e6>
 80044bc:	2304      	movs	r3, #4
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e07a      	b.n	80045ba <UART_SetConfig+0x2e6>
 80044c4:	2308      	movs	r3, #8
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e076      	b.n	80045ba <UART_SetConfig+0x2e6>
 80044cc:	2310      	movs	r3, #16
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e072      	b.n	80045ba <UART_SetConfig+0x2e6>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <UART_SetConfig+0x2dc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d12a      	bne.n	8004534 <UART_SetConfig+0x260>
 80044de:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <UART_SetConfig+0x2cc>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ec:	d01a      	beq.n	8004524 <UART_SetConfig+0x250>
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d81b      	bhi.n	800452c <UART_SetConfig+0x258>
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f8:	d00c      	beq.n	8004514 <UART_SetConfig+0x240>
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d815      	bhi.n	800452c <UART_SetConfig+0x258>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <UART_SetConfig+0x238>
 8004504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004508:	d008      	beq.n	800451c <UART_SetConfig+0x248>
 800450a:	e00f      	b.n	800452c <UART_SetConfig+0x258>
 800450c:	2300      	movs	r3, #0
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e052      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e04e      	b.n	80045ba <UART_SetConfig+0x2e6>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e04a      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e046      	b.n	80045ba <UART_SetConfig+0x2e6>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e042      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a17      	ldr	r2, [pc, #92]	; (8004598 <UART_SetConfig+0x2c4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d13a      	bne.n	80045b4 <UART_SetConfig+0x2e0>
 800453e:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <UART_SetConfig+0x2cc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800454c:	d01a      	beq.n	8004584 <UART_SetConfig+0x2b0>
 800454e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004552:	d81b      	bhi.n	800458c <UART_SetConfig+0x2b8>
 8004554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004558:	d00c      	beq.n	8004574 <UART_SetConfig+0x2a0>
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d815      	bhi.n	800458c <UART_SetConfig+0x2b8>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <UART_SetConfig+0x298>
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d008      	beq.n	800457c <UART_SetConfig+0x2a8>
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x2b8>
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e022      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e01e      	b.n	80045ba <UART_SetConfig+0x2e6>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	e01a      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e016      	b.n	80045ba <UART_SetConfig+0x2e6>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e012      	b.n	80045ba <UART_SetConfig+0x2e6>
 8004594:	efff69f3 	.word	0xefff69f3
 8004598:	40008000 	.word	0x40008000
 800459c:	40013800 	.word	0x40013800
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40004400 	.word	0x40004400
 80045a8:	40004800 	.word	0x40004800
 80045ac:	40004c00 	.word	0x40004c00
 80045b0:	40005000 	.word	0x40005000
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a9f      	ldr	r2, [pc, #636]	; (800483c <UART_SetConfig+0x568>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d17a      	bne.n	80046ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d824      	bhi.n	8004616 <UART_SetConfig+0x342>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <UART_SetConfig+0x300>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080045f9 	.word	0x080045f9
 80045d8:	08004617 	.word	0x08004617
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004617 	.word	0x08004617
 80045e4:	08004607 	.word	0x08004607
 80045e8:	08004617 	.word	0x08004617
 80045ec:	08004617 	.word	0x08004617
 80045f0:	08004617 	.word	0x08004617
 80045f4:	0800460f 	.word	0x0800460f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f8:	f7fd fe04 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80045fc:	61f8      	str	r0, [r7, #28]
        break;
 80045fe:	e010      	b.n	8004622 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4b8f      	ldr	r3, [pc, #572]	; (8004840 <UART_SetConfig+0x56c>)
 8004602:	61fb      	str	r3, [r7, #28]
        break;
 8004604:	e00d      	b.n	8004622 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004606:	f7fd fd65 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800460a:	61f8      	str	r0, [r7, #28]
        break;
 800460c:	e009      	b.n	8004622 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004612:	61fb      	str	r3, [r7, #28]
        break;
 8004614:	e005      	b.n	8004622 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004620:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80fb 	beq.w	8004820 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	429a      	cmp	r2, r3
 8004638:	d305      	bcc.n	8004646 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	429a      	cmp	r2, r3
 8004644:	d903      	bls.n	800464e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800464c:	e0e8      	b.n	8004820 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2200      	movs	r2, #0
 8004652:	461c      	mov	r4, r3
 8004654:	4615      	mov	r5, r2
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	022b      	lsls	r3, r5, #8
 8004660:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004664:	0222      	lsls	r2, r4, #8
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	6849      	ldr	r1, [r1, #4]
 800466a:	0849      	lsrs	r1, r1, #1
 800466c:	2000      	movs	r0, #0
 800466e:	4688      	mov	r8, r1
 8004670:	4681      	mov	r9, r0
 8004672:	eb12 0a08 	adds.w	sl, r2, r8
 8004676:	eb43 0b09 	adc.w	fp, r3, r9
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004688:	4650      	mov	r0, sl
 800468a:	4659      	mov	r1, fp
 800468c:	f7fb fd9c 	bl	80001c8 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469e:	d308      	bcc.n	80046b2 <UART_SetConfig+0x3de>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a6:	d204      	bcs.n	80046b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	60da      	str	r2, [r3, #12]
 80046b0:	e0b6      	b.n	8004820 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046b8:	e0b2      	b.n	8004820 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c2:	d15e      	bne.n	8004782 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d828      	bhi.n	800471e <UART_SetConfig+0x44a>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0x400>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	08004701 	.word	0x08004701
 80046dc:	08004709 	.word	0x08004709
 80046e0:	0800471f 	.word	0x0800471f
 80046e4:	0800470f 	.word	0x0800470f
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	0800471f 	.word	0x0800471f
 80046f0:	0800471f 	.word	0x0800471f
 80046f4:	08004717 	.word	0x08004717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f8:	f7fd fd84 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80046fc:	61f8      	str	r0, [r7, #28]
        break;
 80046fe:	e014      	b.n	800472a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004700:	f7fd fd96 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8004704:	61f8      	str	r0, [r7, #28]
        break;
 8004706:	e010      	b.n	800472a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b4d      	ldr	r3, [pc, #308]	; (8004840 <UART_SetConfig+0x56c>)
 800470a:	61fb      	str	r3, [r7, #28]
        break;
 800470c:	e00d      	b.n	800472a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7fd fce1 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8004712:	61f8      	str	r0, [r7, #28]
        break;
 8004714:	e009      	b.n	800472a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	61fb      	str	r3, [r7, #28]
        break;
 800471c:	e005      	b.n	800472a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d077      	beq.n	8004820 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005a      	lsls	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	441a      	add	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d916      	bls.n	800477a <UART_SetConfig+0x4a6>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004752:	d212      	bcs.n	800477a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f023 030f 	bic.w	r3, r3, #15
 800475c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	b29b      	uxth	r3, r3
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	b29a      	uxth	r2, r3
 800476a:	8afb      	ldrh	r3, [r7, #22]
 800476c:	4313      	orrs	r3, r2
 800476e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	8afa      	ldrh	r2, [r7, #22]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	e052      	b.n	8004820 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004780:	e04e      	b.n	8004820 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004786:	2b08      	cmp	r3, #8
 8004788:	d827      	bhi.n	80047da <UART_SetConfig+0x506>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x4bc>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047db 	.word	0x080047db
 80047a0:	080047cb 	.word	0x080047cb
 80047a4:	080047db 	.word	0x080047db
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047db 	.word	0x080047db
 80047b0:	080047d3 	.word	0x080047d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fd fd26 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80047b8:	61f8      	str	r0, [r7, #28]
        break;
 80047ba:	e014      	b.n	80047e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047bc:	f7fd fd38 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 80047c0:	61f8      	str	r0, [r7, #28]
        break;
 80047c2:	e010      	b.n	80047e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <UART_SetConfig+0x56c>)
 80047c6:	61fb      	str	r3, [r7, #28]
        break;
 80047c8:	e00d      	b.n	80047e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ca:	f7fd fc83 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 80047ce:	61f8      	str	r0, [r7, #28]
        break;
 80047d0:	e009      	b.n	80047e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	61fb      	str	r3, [r7, #28]
        break;
 80047d8:	e005      	b.n	80047e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047e4:	bf00      	nop
    }

    if (pclk != 0U)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d019      	beq.n	8004820 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	085a      	lsrs	r2, r3, #1
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	441a      	add	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b0f      	cmp	r3, #15
 8004804:	d909      	bls.n	800481a <UART_SetConfig+0x546>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d205      	bcs.n	800481a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
 8004818:	e002      	b.n	8004820 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800482c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004830:	4618      	mov	r0, r3
 8004832:	3728      	adds	r7, #40	; 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	40008000 	.word	0x40008000
 8004840:	00f42400 	.word	0x00f42400

08004844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01a      	beq.n	800495a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004942:	d10a      	bne.n	800495a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b098      	sub	sp, #96	; 0x60
 800498c:	af02      	add	r7, sp, #8
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004998:	f7fc f960 	bl	8000c5c <HAL_GetTick>
 800499c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d12e      	bne.n	8004a0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f88c 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d021      	beq.n	8004a0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049da:	653b      	str	r3, [r7, #80]	; 0x50
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
 80049e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e6      	bne.n	80049c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e062      	b.n	8004ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d149      	bne.n	8004aac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a20:	2200      	movs	r2, #0
 8004a22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f856 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d03c      	beq.n	8004aac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
 8004a52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e6      	bne.n	8004a32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a84:	61fa      	str	r2, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	69b9      	ldr	r1, [r7, #24]
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	617b      	str	r3, [r7, #20]
   return(result);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e011      	b.n	8004ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3758      	adds	r7, #88	; 0x58
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae8:	e04f      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d04b      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af2:	f7fc f8b3 	bl	8000c5c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d302      	bcc.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e04e      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d037      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d034      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d031      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d110      	bne.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f838 	bl	8004bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2208      	movs	r2, #8
 8004b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e029      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b64:	d111      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f81e 	bl	8004bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e00f      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d0a0      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b095      	sub	sp, #84	; 0x54
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e6      	bne.n	8004bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d118      	bne.n	8004c5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f023 0310 	bic.w	r3, r3, #16
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	613b      	str	r3, [r7, #16]
   return(result);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c6e:	bf00      	nop
 8004c70:	3754      	adds	r7, #84	; 0x54
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <memset>:
 8004c7a:	4402      	add	r2, r0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d100      	bne.n	8004c84 <memset+0xa>
 8004c82:	4770      	bx	lr
 8004c84:	f803 1b01 	strb.w	r1, [r3], #1
 8004c88:	e7f9      	b.n	8004c7e <memset+0x4>
	...

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4d0d      	ldr	r5, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c92:	1b64      	subs	r4, r4, r5
 8004c94:	10a4      	asrs	r4, r4, #2
 8004c96:	2600      	movs	r6, #0
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	4c0c      	ldr	r4, [pc, #48]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca0:	f000 f818 	bl	8004cd4 <_init>
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	2600      	movs	r6, #0
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	4798      	blx	r3
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	4798      	blx	r3
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08004d3c 	.word	0x08004d3c
 8004cc8:	08004d3c 	.word	0x08004d3c
 8004ccc:	08004d3c 	.word	0x08004d3c
 8004cd0:	08004d40 	.word	0x08004d40

08004cd4 <_init>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr

08004ce0 <_fini>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr
