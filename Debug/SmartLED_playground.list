
SmartLED_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c9c  08004c9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca4  08004ca4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08004cb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004cb8  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010123  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002425  00000000  00000000  000301a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc0  00000000  00000000  000334e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002665d  00000000  00000000  000340a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012eb8  00000000  00000000  0005a6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb04  00000000  00000000  0006d5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e74  00000000  00000000  0015c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  0015ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c3c 	.word	0x08004c3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c3c 	.word	0x08004c3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x38>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6493      	str	r3, [r2, #72]	; 0x48
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x38>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2010      	movs	r0, #16
 80004e8:	f000 fc77 	bl	8000dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004ec:	2010      	movs	r0, #16
 80004ee:	f000 fc90 	bl	8000e12 <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a2a      	ldr	r2, [pc, #168]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a24      	ldr	r2, [pc, #144]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <MX_GPIO_Init+0xc4>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_GPIO_Init+0xc4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 f805 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0xc8>)
 800059a:	f000 fe4d 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800059e:	2320      	movs	r3, #32
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f000 fe3e 	bl	8001238 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	; 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000800 	.word	0x48000800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0bc      	sub	sp, #240	; 0xf0
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 faab 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f835 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f7ff ff91 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f7ff ff71 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f9ed 	bl	80009c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005e6:	f000 f8ed 	bl	80007c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80005ea:	4815      	ldr	r0, [pc, #84]	; (8000640 <main+0x74>)
 80005ec:	f002 fb5e 	bl	8002cac <HAL_TIM_Base_Start>
  uint8_t test[40 + 8 * 24 + 1] = {0};
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	22e5      	movs	r2, #229	; 0xe5
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 faf1 	bl	8004be2 <memset>
  // Zerowanie kolorów wszystkich diod
  for (int i = 0; i < 8 * 24; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000606:	e00c      	b.n	8000622 <main+0x56>
    test[40 + i] = 32;
 8000608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800060c:	3328      	adds	r3, #40	; 0x28
 800060e:	33f0      	adds	r3, #240	; 0xf0
 8000610:	443b      	add	r3, r7
 8000612:	2220      	movs	r2, #32
 8000614:	f803 2cf0 	strb.w	r2, [r3, #-240]
  for (int i = 0; i < 8 * 24; i++)
 8000618:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800061c:	3301      	adds	r3, #1
 800061e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000626:	2bbf      	cmp	r3, #191	; 0xbf
 8000628:	ddee      	ble.n	8000608 <main+0x3c>

  // Wyłącz jedną diodę
  // test[40] = 32;

  // Stan wysoki na końcu
  test[40 + 8 * 24] = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, &test, sizeof(test));
 8000630:	463a      	mov	r2, r7
 8000632:	23e9      	movs	r3, #233	; 0xe9
 8000634:	2100      	movs	r1, #0
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <main+0x74>)
 8000638:	f002 fc02 	bl	8002e40 <HAL_TIM_PWM_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x70>
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fac5 	bl	8004be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f000 ffb5 	bl	80015d8 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f837 	bl	80006e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ffec 	bl	8001684 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b2:	f000 f818 	bl	80006e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fbb4 	bl	8001e3c <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006da:	f000 f804 	bl	80006e6 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3758      	adds	r7, #88	; 0x58
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ea:	b672      	cpsid	i
}
 80006ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ee:	e7fe      	b.n	80006ee <Error_Handler+0x8>

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_MspInit+0x44>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <HAL_MspInit+0x44>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6613      	str	r3, [r2, #96]	; 0x60
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_MspInit+0x44>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x44>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_MspInit+0x44>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	6593      	str	r3, [r2, #88]	; 0x58
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x44>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 fa2e 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <DMA1_Channel6_IRQHandler+0x10>)
 8000792:	f000 fc71 	bl	8001078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000074 	.word	0x20000074

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_TIM3_Init+0xe4>)
 80007f8:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_TIM3_Init+0xe8>)
 80007fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_TIM3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM3_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_TIM3_Init+0xe4>)
 800080a:	2263      	movs	r2, #99	; 0x63
 800080c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_TIM3_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081a:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_TIM3_Init+0xe4>)
 800081c:	f002 f9ee 	bl	8002bfc <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000826:	f7ff ff5e 	bl	80006e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000834:	4619      	mov	r1, r3
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_TIM3_Init+0xe4>)
 8000838:	f002 fe36 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000842:	f7ff ff50 	bl	80006e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000846:	4818      	ldr	r0, [pc, #96]	; (80008a8 <MX_TIM3_Init+0xe4>)
 8000848:	f002 fa98 	bl	8002d7c <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000852:	f7ff ff48 	bl	80006e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4810      	ldr	r0, [pc, #64]	; (80008a8 <MX_TIM3_Init+0xe4>)
 8000866:	f003 fc13 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000870:	f7ff ff39 	bl	80006e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM3_Init+0xe4>)
 800088c:	f002 fcf8 	bl	8003280 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000896:	f7ff ff26 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM3_Init+0xe4>)
 800089c:	f000 f85a 	bl	8000954 <HAL_TIM_MspPostInit>

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000028 	.word	0x20000028
 80008ac:	40000400 	.word	0x40000400

080008b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <HAL_TIM_Base_MspInit+0x94>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d13b      	bne.n	800093a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_TIM_Base_MspInit+0x98>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a20      	ldr	r2, [pc, #128]	; (8000948 <HAL_TIM_Base_MspInit+0x98>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_TIM_Base_MspInit+0x98>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 80008dc:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <HAL_TIM_Base_MspInit+0xa0>)
 80008de:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 80008e2:	2205      	movs	r2, #5
 80008e4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 80008e8:	2210      	movs	r2, #16
 80008ea:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 80008fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008fe:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 8000914:	f000 fa98 	bl	8000e48 <HAL_DMA_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 800091e:	f7ff fee2 	bl	80006e6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a09      	ldr	r2, [pc, #36]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 8000932:	639a      	str	r2, [r3, #56]	; 0x38
 8000934:	4a05      	ldr	r2, [pc, #20]	; (800094c <HAL_TIM_Base_MspInit+0x9c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40000400 	.word	0x40000400
 8000948:	40021000 	.word	0x40021000
 800094c:	20000074 	.word	0x20000074
 8000950:	4002006c 	.word	0x4002006c

08000954 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <HAL_TIM_MspPostInit+0x64>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d11c      	bne.n	80009b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_TIM_MspPostInit+0x68>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_TIM_MspPostInit+0x68>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_TIM_MspPostInit+0x68>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f000 fc44 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40021000 	.word	0x40021000

080009c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART2_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 8000a04:	f003 fbcc 	bl	80041a0 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f7ff fe6a 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000bc 	.word	0x200000bc
 8000a1c:	40004400 	.word	0x40004400

08000a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0ac      	sub	sp, #176	; 0xb0
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2288      	movs	r2, #136	; 0x88
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f8ce 	bl	8004be2 <memset>
  if(uartHandle->Instance==USART2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <HAL_UART_MspInit+0xb0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d13b      	bne.n	8000ac8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fc11 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a68:	f7ff fe3d 	bl	80006e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a76:	6593      	str	r3, [r2, #88]	; 0x58
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0xb4>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 fbb8 	bl	8001238 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac8:	bf00      	nop
 8000aca:	37b0      	adds	r7, #176	; 0xb0
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff fe60 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f004 f875 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fd5f 	bl	80005cc <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b1c:	08004cac 	.word	0x08004cac
  ldr r2, =_sbss
 8000b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b24:	20000148 	.word	0x20000148

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_Init+0x3c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_Init+0x3c>)
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f000 f93e 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f80f 	bl	8000b6c <HAL_InitTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	e001      	b.n	8000b5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5a:	f7ff fdc9 	bl	80006f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d023      	beq.n	8000bc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_InitTick+0x70>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f949 	bl	8000e2e <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10f      	bne.n	8000bc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d809      	bhi.n	8000bbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 f913 	bl	8000dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e004      	b.n	8000bcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e001      	b.n	8000bcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000144 	.word	0x20000144

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000144 	.word	0x20000144

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff29 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff3e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff31 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffa2 	bl	8000d80 <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e098      	b.n	8000f8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <HAL_DMA_Init+0x150>)
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d80f      	bhi.n	8000e86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HAL_DMA_Init+0x154>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a4b      	ldr	r2, [pc, #300]	; (8000fa0 <HAL_DMA_Init+0x158>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	009a      	lsls	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_DMA_Init+0x15c>)
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
 8000e84:	e00e      	b.n	8000ea4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <HAL_DMA_Init+0x160>)
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a43      	ldr	r2, [pc, #268]	; (8000fa0 <HAL_DMA_Init+0x158>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	009a      	lsls	r2, r3, #2
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a42      	ldr	r2, [pc, #264]	; (8000fac <HAL_DMA_Init+0x164>)
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ebe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000efe:	d039      	beq.n	8000f74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <HAL_DMA_Init+0x15c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d11a      	bne.n	8000f40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_DMA_Init+0x168>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f003 031c 	and.w	r3, r3, #28
 8000f16:	210f      	movs	r1, #15
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4924      	ldr	r1, [pc, #144]	; (8000fb0 <HAL_DMA_Init+0x168>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_DMA_Init+0x168>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6859      	ldr	r1, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 031c 	and.w	r3, r3, #28
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	491d      	ldr	r1, [pc, #116]	; (8000fb0 <HAL_DMA_Init+0x168>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
 8000f3e:	e019      	b.n	8000f74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_DMA_Init+0x16c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f48:	f003 031c 	and.w	r3, r3, #28
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4917      	ldr	r1, [pc, #92]	; (8000fb4 <HAL_DMA_Init+0x16c>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_DMA_Init+0x16c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6859      	ldr	r1, [r3, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f003 031c 	and.w	r3, r3, #28
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	4911      	ldr	r1, [pc, #68]	; (8000fb4 <HAL_DMA_Init+0x16c>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40020407 	.word	0x40020407
 8000f9c:	bffdfff8 	.word	0xbffdfff8
 8000fa0:	cccccccd 	.word	0xcccccccd
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	bffdfbf8 	.word	0xbffdfbf8
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	400200a8 	.word	0x400200a8
 8000fb4:	400204a8 	.word	0x400204a8

08000fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_DMA_Start_IT+0x20>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e04b      	b.n	8001070 <HAL_DMA_Start_IT+0xb8>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d13a      	bne.n	8001062 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2202      	movs	r2, #2
 8000ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0201 	bic.w	r2, r2, #1
 8001008:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f8e0 	bl	80011d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 020e 	orr.w	r2, r2, #14
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e00f      	b.n	8001050 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0204 	bic.w	r2, r2, #4
 800103e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 020a 	orr.w	r2, r2, #10
 800104e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e005      	b.n	800106e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800106a:	2302      	movs	r3, #2
 800106c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800106e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	f003 031c 	and.w	r3, r3, #28
 8001098:	2204      	movs	r2, #4
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d026      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x7a>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d021      	beq.n	80010f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d107      	bne.n	80010cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0204 	bic.w	r2, r2, #4
 80010ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	f003 021c 	and.w	r2, r3, #28
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	2104      	movs	r1, #4
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d071      	beq.n	80011cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010f0:	e06c      	b.n	80011cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 031c 	and.w	r3, r3, #28
 80010fa:	2202      	movs	r2, #2
 80010fc:	409a      	lsls	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d02e      	beq.n	8001164 <HAL_DMA_IRQHandler+0xec>
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d029      	beq.n	8001164 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10b      	bne.n	8001136 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 020a 	bic.w	r2, r2, #10
 800112c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f003 021c 	and.w	r2, r3, #28
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	2102      	movs	r1, #2
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	2b00      	cmp	r3, #0
 8001158:	d038      	beq.n	80011cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001162:	e033      	b.n	80011cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 031c 	and.w	r3, r3, #28
 800116c:	2208      	movs	r2, #8
 800116e:	409a      	lsls	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d02a      	beq.n	80011ce <HAL_DMA_IRQHandler+0x156>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d025      	beq.n	80011ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 020e 	bic.w	r2, r2, #14
 8001190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 021c 	and.w	r2, r3, #28
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
}
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 021c 	and.w	r2, r3, #28
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b10      	cmp	r3, #16
 8001206:	d108      	bne.n	800121a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001218:	e007      	b.n	800122a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	60da      	str	r2, [r3, #12]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e17f      	b.n	8001548 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8171 	beq.w	8001542 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d118      	bne.n	8001318 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80ac 	beq.w	8001542 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_GPIO_Init+0x330>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <HAL_GPIO_Init+0x330>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6613      	str	r3, [r2, #96]	; 0x60
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_GPIO_Init+0x330>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <HAL_GPIO_Init+0x334>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x242>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_GPIO_Init+0x338>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x23e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4e      	ldr	r2, [pc, #312]	; (8001574 <HAL_GPIO_Init+0x33c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x23a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4d      	ldr	r2, [pc, #308]	; (8001578 <HAL_GPIO_Init+0x340>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x236>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4c      	ldr	r2, [pc, #304]	; (800157c <HAL_GPIO_Init+0x344>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x232>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4b      	ldr	r2, [pc, #300]	; (8001580 <HAL_GPIO_Init+0x348>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x22e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4a      	ldr	r2, [pc, #296]	; (8001584 <HAL_GPIO_Init+0x34c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x22a>
 800145e:	2306      	movs	r3, #6
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001462:	2307      	movs	r3, #7
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x244>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x244>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x244>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x244>
 800147a:	2300      	movs	r3, #0
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800148c:	4937      	ldr	r1, [pc, #220]	; (800156c <HAL_GPIO_Init+0x334>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_GPIO_Init+0x350>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014be:	4a32      	ldr	r2, [pc, #200]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001512:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_GPIO_Init+0x350>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_GPIO_Init+0x350>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_GPIO_Init+0x350>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	f47f ae78 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40010000 	.word	0x40010000
 8001570:	48000400 	.word	0x48000400
 8001574:	48000800 	.word	0x48000800
 8001578:	48000c00 	.word	0x48000c00
 800157c:	48001000 	.word	0x48001000
 8001580:	48001400 	.word	0x48001400
 8001584:	48001800 	.word	0x48001800
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40007000 	.word	0x40007000

080015d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e6:	d130      	bne.n	800164a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f4:	d038      	beq.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2232      	movs	r2, #50	; 0x32
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161c:	e002      	b.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3b01      	subs	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d102      	bne.n	8001638 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f2      	bne.n	800161e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001644:	d110      	bne.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e00f      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001656:	d007      	beq.n	8001668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83

08001684 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e3ca      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4b97      	ldr	r3, [pc, #604]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4b94      	ldr	r3, [pc, #592]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80e4 	beq.w	8001880 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_RCC_OscConfig+0x4a>
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	f040 808b 	bne.w	80017dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8087 	bne.w	80017dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x62>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e3a2      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <HAL_RCC_OscConfig+0x7c>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fe:	e005      	b.n	800170c <HAL_RCC_OscConfig+0x88>
 8001700:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170c:	4293      	cmp	r3, r2
 800170e:	d223      	bcs.n	8001758 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fd55 	bl	80021c4 <RCC_SetFlashLatencyFromMSIRange>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e383      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001724:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a72      	ldr	r2, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	496d      	ldr	r1, [pc, #436]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001742:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4968      	ldr	r1, [pc, #416]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001752:	4313      	orrs	r3, r2
 8001754:	604b      	str	r3, [r1, #4]
 8001756:	e025      	b.n	80017a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b66      	ldr	r3, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4960      	ldr	r1, [pc, #384]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	495b      	ldr	r1, [pc, #364]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 fd15 	bl	80021c4 <RCC_SetFlashLatencyFromMSIRange>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e343      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a4:	f000 fc4a 	bl	800203c <HAL_RCC_GetSysClockFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	4950      	ldr	r1, [pc, #320]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_RCC_OscConfig+0x278>)
 80017c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c4:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff f9cf 	bl	8000b6c <HAL_InitTick>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d052      	beq.n	800187e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	e327      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d032      	beq.n	800184a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e4:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa0c 	bl	8000c0c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f8:	f7ff fa08 	bl	8000c0c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e310      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4931      	ldr	r1, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	492c      	ldr	r1, [pc, #176]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	e01a      	b.n	8001880 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001856:	f7ff f9d9 	bl	8000c0c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185e:	f7ff f9d5 	bl	8000c0c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e2dd      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x1da>
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d074      	beq.n	8001976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x21a>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d10e      	bne.n	80018b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d064      	beq.n	8001974 <HAL_RCC_OscConfig+0x2f0>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d160      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e2ba      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x24a>
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e026      	b.n	800191c <HAL_RCC_OscConfig+0x298>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d6:	d115      	bne.n	8001904 <HAL_RCC_OscConfig+0x280>
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a02      	ldr	r2, [pc, #8]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e014      	b.n	800191c <HAL_RCC_OscConfig+0x298>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08004c54 	.word	0x08004c54
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004
 8001904:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 800190a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a9c      	ldr	r2, [pc, #624]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f972 	bl	8000c0c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f96e 	bl	8000c0c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e276      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193e:	4b92      	ldr	r3, [pc, #584]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x2a8>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f95e 	bl	8000c0c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff f95a 	bl	8000c0c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e262      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d0>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d060      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x310>
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d116      	bne.n	80019c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001994:	4b7c      	ldr	r3, [pc, #496]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_OscConfig+0x328>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e23f      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b76      	ldr	r3, [pc, #472]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	4973      	ldr	r1, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	e040      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d023      	beq.n	8001a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f919 	bl	8000c0c <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f915 	bl	8000c0c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e21d      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f0:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b62      	ldr	r3, [pc, #392]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	495f      	ldr	r1, [pc, #380]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e018      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5c      	ldr	r2, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f8f5 	bl	8000c0c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff f8f1 	bl	8000c0c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1f9      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03c      	beq.n	8001aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a68:	f7ff f8d0 	bl	8000c0c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f8cc 	bl	8000c0c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1d4      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ef      	beq.n	8001a70 <HAL_RCC_OscConfig+0x3ec>
 8001a90:	e01b      	b.n	8001aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f8b3 	bl	8000c0c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f8af 	bl	8000c0c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1b7      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ef      	bne.n	8001aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80a6 	beq.w	8001c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10d      	bne.n	8001b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d118      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f876 	bl	8000c0c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7ff f872 	bl	8000c0c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e17a      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x508>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4d8>
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5a:	e029      	b.n	8001bb0 <HAL_RCC_OscConfig+0x52c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d115      	bne.n	8001b90 <HAL_RCC_OscConfig+0x50c>
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b84:	e014      	b.n	8001bb0 <HAL_RCC_OscConfig+0x52c>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	4a9b      	ldr	r2, [pc, #620]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba0:	4b98      	ldr	r3, [pc, #608]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a97      	ldr	r2, [pc, #604]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d016      	beq.n	8001be6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f828 	bl	8000c0c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff f824 	bl	8000c0c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e12a      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ed      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x53c>
 8001be4:	e015      	b.n	8001c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff f811 	bl	8000c0c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff f80d 	bl	8000c0c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e113      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c04:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ed      	bne.n	8001bee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c18:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a79      	ldr	r2, [pc, #484]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80fe 	beq.w	8001e2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	f040 80d0 	bne.w	8001dd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c38:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d130      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	3b01      	subs	r3, #1
 8001c58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d127      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11f      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c78:	2a07      	cmp	r2, #7
 8001c7a:	bf14      	ite	ne
 8001c7c:	2201      	movne	r2, #1
 8001c7e:	2200      	moveq	r2, #0
 8001c80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d113      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d06e      	beq.n	8001d8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b0c      	cmp	r3, #12
 8001cb2:	d069      	beq.n	8001d88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0ad      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cdc:	f7fe ff96 	bl	8000c0c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff92 	bl	8000c0c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e09a      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_RCC_OscConfig+0x784>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d12:	3a01      	subs	r2, #1
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d1c:	0212      	lsls	r2, r2, #8
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	0552      	lsls	r2, r2, #21
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d30:	0852      	lsrs	r2, r2, #1
 8001d32:	3a01      	subs	r2, #1
 8001d34:	0652      	lsls	r2, r2, #25
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d3c:	0912      	lsrs	r2, r2, #4
 8001d3e:	0452      	lsls	r2, r2, #17
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4930      	ldr	r1, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a2a      	ldr	r2, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d60:	f7fe ff54 	bl	8000c0c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe ff50 	bl	8000c0c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e058      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d86:	e050      	b.n	8001e2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e04f      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d148      	bne.n	8001e2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001db0:	f7fe ff2c 	bl	8000c0c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe ff28 	bl	8000c0c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e030      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x734>
 8001dd6:	e028      	b.n	8001e2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d023      	beq.n	8001e26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_RCC_OscConfig+0x780>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7fe ff0f 	bl	8000c0c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e00c      	b.n	8001e0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe ff0b 	bl	8000c0c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d905      	bls.n	8001e0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e013      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_OscConfig+0x7b0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ec      	bne.n	8001df2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x7b0>)
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	4905      	ldr	r1, [pc, #20]	; (8001e34 <HAL_RCC_OscConfig+0x7b0>)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_OscConfig+0x7b4>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
 8001e24:	e001      	b.n	8001e2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	feeefffc 	.word	0xfeeefffc

08001e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0e7      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b75      	ldr	r3, [pc, #468]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	4970      	ldr	r1, [pc, #448]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0cf      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d908      	bls.n	8001eae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4960      	ldr	r1, [pc, #384]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d04c      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d121      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0a6      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b54      	ldr	r3, [pc, #336]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e09a      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e08e      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f02:	4b4a      	ldr	r3, [pc, #296]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e086      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4943      	ldr	r1, [pc, #268]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe fe72 	bl	8000c0c <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe fe6e 	bl	8000c0c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e06e      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d010      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d208      	bcs.n	8001f82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	492b      	ldr	r1, [pc, #172]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d210      	bcs.n	8001fb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4923      	ldr	r1, [pc, #140]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e036      	b.n	8002020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4918      	ldr	r1, [pc, #96]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4910      	ldr	r1, [pc, #64]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff0:	f000 f824 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_RCC_ClockConfig+0x1f0>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	490b      	ldr	r1, [pc, #44]	; (8002030 <HAL_RCC_ClockConfig+0x1f4>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1fc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fda9 	bl	8000b6c <HAL_InitTick>
 800201a:	4603      	mov	r3, r0
 800201c:	72fb      	strb	r3, [r7, #11]

  return status;
 800201e:	7afb      	ldrb	r3, [r7, #11]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	08004c54 	.word	0x08004c54
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x34>
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d121      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d11e      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e005      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800208c:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002098:	4a2b      	ldr	r2, [pc, #172]	; (8002148 <HAL_RCC_GetSysClockFreq+0x10c>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_GetSysClockFreq+0x110>)
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e004      	b.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020c0:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_RCC_GetSysClockFreq+0x114>)
 80020c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d134      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d003      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0xac>
 80020e0:	e005      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_GetSysClockFreq+0x110>)
 80020e4:	617b      	str	r3, [r7, #20]
      break;
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ea:	617b      	str	r3, [r7, #20]
      break;
 80020ec:	e002      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	617b      	str	r3, [r7, #20]
      break;
 80020f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	3301      	adds	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	fb03 f202 	mul.w	r2, r3, r2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_GetSysClockFreq+0x108>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	0e5b      	lsrs	r3, r3, #25
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	3301      	adds	r3, #1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002134:	69bb      	ldr	r3, [r7, #24]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	08004c6c 	.word	0x08004c6c
 800214c:	00f42400 	.word	0x00f42400
 8002150:	007a1200 	.word	0x007a1200

08002154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_GetHCLKFreq+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000000 	.word	0x20000000

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002170:	f7ff fff0 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08004c64 	.word	0x08004c64

08002198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800219c:	f7ff ffda 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	0adb      	lsrs	r3, r3, #11
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	4904      	ldr	r1, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08004c64 	.word	0x08004c64

080021c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021dc:	f7ff f9ee 	bl	80015bc <HAL_PWREx_GetVoltageRange>
 80021e0:	6178      	str	r0, [r7, #20]
 80021e2:	e014      	b.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	4a24      	ldr	r2, [pc, #144]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6593      	str	r3, [r2, #88]	; 0x58
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021fc:	f7ff f9de 	bl	80015bc <HAL_PWREx_GetVoltageRange>
 8002200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002214:	d10b      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d919      	bls.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2ba0      	cmp	r3, #160	; 0xa0
 8002220:	d902      	bls.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002222:	2302      	movs	r3, #2
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e013      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002228:	2301      	movs	r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e010      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d902      	bls.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002234:	2303      	movs	r3, #3
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e00a      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d102      	bne.n	8002246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002240:	2302      	movs	r3, #2
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e004      	b.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b70      	cmp	r3, #112	; 0x70
 800224a:	d101      	bne.n	8002250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 0207 	bic.w	r2, r3, #7
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800228c:	2300      	movs	r3, #0
 800228e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002290:	2300      	movs	r3, #0
 8002292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800229c:	2b00      	cmp	r3, #0
 800229e:	d041      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022a8:	d02a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ae:	d824      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ba:	d81e      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c4:	d010      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022c6:	e018      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022c8:	4b86      	ldr	r3, [pc, #536]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a85      	ldr	r2, [pc, #532]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d4:	e015      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fabb 	bl	8002858 <RCCEx_PLLSAI1_Config>
 80022e2:	4603      	mov	r3, r0
 80022e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e6:	e00c      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3320      	adds	r3, #32
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fba6 	bl	8002a40 <RCCEx_PLLSAI2_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f8:	e003      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	74fb      	strb	r3, [r7, #19]
      break;
 80022fe:	e000      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002308:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002316:	4973      	ldr	r1, [pc, #460]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800231e:	e001      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d041      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002338:	d02a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800233a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800233e:	d824      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002344:	d008      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800234a:	d81e      	bhi.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d010      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002356:	e018      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002358:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a61      	ldr	r2, [pc, #388]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002364:	e015      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fa73 	bl	8002858 <RCCEx_PLLSAI1_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002376:	e00c      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3320      	adds	r3, #32
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb5e 	bl	8002a40 <RCCEx_PLLSAI2_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002388:	e003      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	74fb      	strb	r3, [r7, #19]
      break;
 800238e:	e000      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002398:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023a6:	494f      	ldr	r1, [pc, #316]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ae:	e001      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a0 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f8:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002404:	f7fe fc02 	bl	8000c0c <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800240a:	e009      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7fe fbfe 	bl	8000c0c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d902      	bls.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	74fb      	strb	r3, [r7, #19]
        break;
 800241e:	e005      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ef      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d15c      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01f      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	d019      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fbbd 	bl	8000c0c <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002494:	e00b      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fbb9 	bl	8000c0c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d902      	bls.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	74fb      	strb	r3, [r7, #19]
            break;
 80024ac:	e006      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ec      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d2:	4904      	ldr	r1, [pc, #16]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024da:	e009      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
 80024e0:	e006      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4b9e      	ldr	r3, [pc, #632]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4a9d      	ldr	r2, [pc, #628]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4b98      	ldr	r3, [pc, #608]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	4994      	ldr	r1, [pc, #592]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4b8f      	ldr	r3, [pc, #572]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	498c      	ldr	r1, [pc, #560]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b87      	ldr	r3, [pc, #540]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	4983      	ldr	r1, [pc, #524]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b7e      	ldr	r3, [pc, #504]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	497b      	ldr	r1, [pc, #492]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	4972      	ldr	r1, [pc, #456]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	496a      	ldr	r1, [pc, #424]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	4961      	ldr	r1, [pc, #388]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025fc:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	4959      	ldr	r1, [pc, #356]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261e:	4b54      	ldr	r3, [pc, #336]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800262c:	4950      	ldr	r1, [pc, #320]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002640:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	4948      	ldr	r1, [pc, #288]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002662:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	493f      	ldr	r1, [pc, #252]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d028      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002692:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a2:	d106      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a31      	ldr	r2, [pc, #196]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
 80026b0:	e011      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3304      	adds	r3, #4
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f8c8 	bl	8002858 <RCCEx_PLLSAI1_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d028      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	491f      	ldr	r1, [pc, #124]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002700:	d106      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270c:	60d3      	str	r3, [r2, #12]
 800270e:	e011      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002718:	d10c      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f899 	bl	8002858 <RCCEx_PLLSAI1_Config>
 8002726:	4603      	mov	r3, r0
 8002728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02b      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800275e:	d109      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a02      	ldr	r2, [pc, #8]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
 800276c:	e014      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277c:	d10c      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f867 	bl	8002858 <RCCEx_PLLSAI1_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02f      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b2:	4928      	ldr	r1, [pc, #160]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3304      	adds	r3, #4
 80027c8:	2102      	movs	r1, #2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f844 	bl	8002858 <RCCEx_PLLSAI1_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d014      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	74bb      	strb	r3, [r7, #18]
 80027de:	e011      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3320      	adds	r3, #32
 80027ee:	2102      	movs	r1, #2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f925 	bl	8002a40 <RCCEx_PLLSAI2_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281e:	490d      	ldr	r1, [pc, #52]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002842:	4904      	ldr	r1, [pc, #16]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800284a:	7cbb      	ldrb	r3, [r7, #18]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000

08002858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002866:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d018      	beq.n	80028a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0203 	and.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d10d      	bne.n	800289e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
       ||
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800288a:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
       ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d047      	beq.n	800292e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e044      	b.n	800292e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d018      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x86>
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d825      	bhi.n	80028fc <RCCEx_PLLSAI1_Config+0xa4>
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d002      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0x62>
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d009      	beq.n	80028cc <RCCEx_PLLSAI1_Config+0x74>
 80028b8:	e020      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ba:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11d      	bne.n	8002902 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ca:	e01a      	b.n	8002902 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028cc:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d116      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e013      	b.n	8002906 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028de:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028fa:	e006      	b.n	800290a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002900:	e004      	b.n	800290c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002902:	bf00      	nop
 8002904:	e002      	b.n	800290c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290a:	bf00      	nop
    }

    if(status == HAL_OK)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6819      	ldr	r1, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	430b      	orrs	r3, r1
 8002928:	4944      	ldr	r1, [pc, #272]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d17d      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800293a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800293e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002940:	f7fe f964 	bl	8000c0c <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002946:	e009      	b.n	800295c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002948:	f7fe f960 	bl	8000c0c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d902      	bls.n	800295c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	73fb      	strb	r3, [r7, #15]
        break;
 800295a:	e005      	b.n	8002968 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ef      	bne.n	8002948 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d160      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6892      	ldr	r2, [r2, #8]
 8002984:	0211      	lsls	r1, r2, #8
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	0912      	lsrs	r2, r2, #4
 800298c:	0452      	lsls	r2, r2, #17
 800298e:	430a      	orrs	r2, r1
 8002990:	492a      	ldr	r1, [pc, #168]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	610b      	str	r3, [r1, #16]
 8002996:	e027      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d112      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6892      	ldr	r2, [r2, #8]
 80029ae:	0211      	lsls	r1, r2, #8
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6912      	ldr	r2, [r2, #16]
 80029b4:	0852      	lsrs	r2, r2, #1
 80029b6:	3a01      	subs	r2, #1
 80029b8:	0552      	lsls	r2, r2, #21
 80029ba:	430a      	orrs	r2, r1
 80029bc:	491f      	ldr	r1, [pc, #124]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	610b      	str	r3, [r1, #16]
 80029c2:	e011      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6892      	ldr	r2, [r2, #8]
 80029d4:	0211      	lsls	r1, r2, #8
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6952      	ldr	r2, [r2, #20]
 80029da:	0852      	lsrs	r2, r2, #1
 80029dc:	3a01      	subs	r2, #1
 80029de:	0652      	lsls	r2, r2, #25
 80029e0:	430a      	orrs	r2, r1
 80029e2:	4916      	ldr	r1, [pc, #88]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe f90a 	bl	8000c0c <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029fa:	e009      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029fc:	f7fe f906 	bl	8000c0c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d902      	bls.n	8002a10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a0e:	e005      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a5a:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10d      	bne.n	8002a86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
       ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d047      	beq.n	8002b16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e044      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d018      	beq.n	8002ac6 <RCCEx_PLLSAI2_Config+0x86>
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d825      	bhi.n	8002ae4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d002      	beq.n	8002aa2 <RCCEx_PLLSAI2_Config+0x62>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d009      	beq.n	8002ab4 <RCCEx_PLLSAI2_Config+0x74>
 8002aa0:	e020      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa2:	4b55      	ldr	r3, [pc, #340]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11d      	bne.n	8002aea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e01a      	b.n	8002aea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e013      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac6:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad2:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae2:	e006      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e004      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002afa:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	4939      	ldr	r1, [pc, #228]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d167      	bne.n	8002bec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a35      	ldr	r2, [pc, #212]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b28:	f7fe f870 	bl	8000c0c <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b30:	f7fe f86c 	bl	8000c0c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
        break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ef      	bne.n	8002b30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d14a      	bne.n	8002bec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d111      	bne.n	8002b80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b5c:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	0912      	lsrs	r2, r2, #4
 8002b74:	0452      	lsls	r2, r2, #17
 8002b76:	430a      	orrs	r2, r1
 8002b78:	491f      	ldr	r1, [pc, #124]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	614b      	str	r3, [r1, #20]
 8002b7e:	e011      	b.n	8002ba4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6892      	ldr	r2, [r2, #8]
 8002b90:	0211      	lsls	r1, r2, #8
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6912      	ldr	r2, [r2, #16]
 8002b96:	0852      	lsrs	r2, r2, #1
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	0652      	lsls	r2, r2, #25
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	4916      	ldr	r1, [pc, #88]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe f82c 	bl	8000c0c <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb6:	e009      	b.n	8002bcc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb8:	f7fe f828 	bl	8000c0c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d902      	bls.n	8002bcc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bca:	e005      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ef      	beq.n	8002bb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4904      	ldr	r1, [pc, #16]	; (8002bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e049      	b.n	8002ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fe44 	bl	80008b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f000 fdec 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d001      	beq.n	8002cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e047      	b.n	8002d54 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <HAL_TIM_Base_Start+0xb4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_TIM_Base_Start+0x66>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d018      	beq.n	8002d12 <HAL_TIM_Base_Start+0x66>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_TIM_Base_Start+0xb8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_TIM_Base_Start+0x66>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_TIM_Base_Start+0xbc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIM_Base_Start+0x66>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_TIM_Base_Start+0xc0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIM_Base_Start+0x66>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_TIM_Base_Start+0xc4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_Base_Start+0x66>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_TIM_Base_Start+0xc8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d115      	bne.n	8002d3e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_TIM_Base_Start+0xcc>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d015      	beq.n	8002d50 <HAL_TIM_Base_Start+0xa4>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d011      	beq.n	8002d50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3c:	e008      	b.n	8002d50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e000      	b.n	8002d52 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40000800 	.word	0x40000800
 8002d6c:	40000c00 	.word	0x40000c00
 8002d70:	40013400 	.word	0x40013400
 8002d74:	40014000 	.word	0x40014000
 8002d78:	00010007 	.word	0x00010007

08002d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e049      	b.n	8002e22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f841 	bl	8002e2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 fd2c 	bl	8003818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e03c      	b.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d109      	bne.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x46>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e02f      	b.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d109      	bne.n	8002ea0 <HAL_TIM_PWM_Start_DMA+0x60>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e022      	b.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d109      	bne.n	8002eba <HAL_TIM_PWM_Start_DMA+0x7a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	bf0c      	ite	eq
 8002eb2:	2301      	moveq	r3, #1
 8002eb4:	2300      	movne	r3, #0
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	e015      	b.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d109      	bne.n	8002ed4 <HAL_TIM_PWM_Start_DMA+0x94>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e008      	b.n	8002ee6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	e1ab      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e03c      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d109      	bne.n	8002f22 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	bf0c      	ite	eq
 8002f1a:	2301      	moveq	r3, #1
 8002f1c:	2300      	movne	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e02f      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d109      	bne.n	8002f3c <HAL_TIM_PWM_Start_DMA+0xfc>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e022      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d109      	bne.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x116>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	e015      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d109      	bne.n	8002f70 <HAL_TIM_PWM_Start_DMA+0x130>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e008      	b.n	8002f82 <HAL_TIM_PWM_Start_DMA+0x142>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d034      	beq.n	8002ff0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_TIM_PWM_Start_DMA+0x152>
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e157      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start_DMA+0x166>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa4:	e026      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start_DMA+0x176>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb4:	e01e      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start_DMA+0x186>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc4:	e016      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d104      	bne.n	8002fd6 <HAL_TIM_PWM_Start_DMA+0x196>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd4:	e00e      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	e006      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fee:	e001      	b.n	8002ff4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e128      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	f200 80ae 	bhi.w	8003158 <HAL_TIM_PWM_Start_DMA+0x318>
 8002ffc:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	08003159 	.word	0x08003159
 800300c:	08003159 	.word	0x08003159
 8003010:	08003159 	.word	0x08003159
 8003014:	08003081 	.word	0x08003081
 8003018:	08003159 	.word	0x08003159
 800301c:	08003159 	.word	0x08003159
 8003020:	08003159 	.word	0x08003159
 8003024:	080030c9 	.word	0x080030c9
 8003028:	08003159 	.word	0x08003159
 800302c:	08003159 	.word	0x08003159
 8003030:	08003159 	.word	0x08003159
 8003034:	08003111 	.word	0x08003111
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	4a84      	ldr	r2, [pc, #528]	; (8003250 <HAL_TIM_PWM_Start_DMA+0x410>)
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	4a83      	ldr	r2, [pc, #524]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003046:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	4a82      	ldr	r2, [pc, #520]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x418>)
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3334      	adds	r3, #52	; 0x34
 800305c:	461a      	mov	r2, r3
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	f7fd ffaa 	bl	8000fb8 <HAL_DMA_Start_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0eb      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307c:	60da      	str	r2, [r3, #12]
      break;
 800307e:	e06e      	b.n	800315e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	4a72      	ldr	r2, [pc, #456]	; (8003250 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	4a71      	ldr	r2, [pc, #452]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x414>)
 800308e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	4a70      	ldr	r2, [pc, #448]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3338      	adds	r3, #56	; 0x38
 80030a4:	461a      	mov	r2, r3
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	f7fd ff86 	bl	8000fb8 <HAL_DMA_Start_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0c7      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e04a      	b.n	800315e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	4a60      	ldr	r2, [pc, #384]	; (8003250 <HAL_TIM_PWM_Start_DMA+0x410>)
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4a5f      	ldr	r2, [pc, #380]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x414>)
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x418>)
 80030de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	333c      	adds	r3, #60	; 0x3c
 80030ec:	461a      	mov	r2, r3
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	f7fd ff62 	bl	8000fb8 <HAL_DMA_Start_IT>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0a3      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310c:	60da      	str	r2, [r3, #12]
      break;
 800310e:	e026      	b.n	800315e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a4e      	ldr	r2, [pc, #312]	; (8003250 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x414>)
 800311e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3340      	adds	r3, #64	; 0x40
 8003134:	461a      	mov	r2, r3
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	f7fd ff3e 	bl	8000fb8 <HAL_DMA_Start_IT>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e07f      	b.n	8003246 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003154:	60da      	str	r2, [r3, #12]
      break;
 8003156:	e002      	b.n	800315e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
      break;
 800315c:	bf00      	nop
  }

  if (status == HAL_OK)
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d16f      	bne.n	8003244 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 ff69 	bl	8004044 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a39      	ldr	r2, [pc, #228]	; (800325c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <HAL_TIM_PWM_Start_DMA+0x364>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a37      	ldr	r2, [pc, #220]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_TIM_PWM_Start_DMA+0x364>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a36      	ldr	r2, [pc, #216]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x424>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_TIM_PWM_Start_DMA+0x364>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a34      	ldr	r2, [pc, #208]	; (8003268 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_TIM_PWM_Start_DMA+0x364>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a33      	ldr	r2, [pc, #204]	; (800326c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_PWM_Start_DMA+0x368>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x36a>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a26      	ldr	r2, [pc, #152]	; (800325c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d018      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_TIM_PWM_Start_DMA+0x430>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a24      	ldr	r2, [pc, #144]	; (8003274 <HAL_TIM_PWM_Start_DMA+0x434>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a23      	ldr	r2, [pc, #140]	; (8003278 <HAL_TIM_PWM_Start_DMA+0x438>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x420>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_TIM_PWM_Start_DMA+0x3c4>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d115      	bne.n	8003230 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d015      	beq.n	8003242 <HAL_TIM_PWM_Start_DMA+0x402>
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d011      	beq.n	8003242 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322e:	e008      	b.n	8003242 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e000      	b.n	8003244 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	08003709 	.word	0x08003709
 8003254:	080037b1 	.word	0x080037b1
 8003258:	08003677 	.word	0x08003677
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40000c00 	.word	0x40000c00
 800327c:	00010007 	.word	0x00010007

08003280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800329a:	2302      	movs	r3, #2
 800329c:	e0ff      	b.n	800349e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b14      	cmp	r3, #20
 80032aa:	f200 80f0 	bhi.w	800348e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	08003309 	.word	0x08003309
 80032b8:	0800348f 	.word	0x0800348f
 80032bc:	0800348f 	.word	0x0800348f
 80032c0:	0800348f 	.word	0x0800348f
 80032c4:	08003349 	.word	0x08003349
 80032c8:	0800348f 	.word	0x0800348f
 80032cc:	0800348f 	.word	0x0800348f
 80032d0:	0800348f 	.word	0x0800348f
 80032d4:	0800338b 	.word	0x0800338b
 80032d8:	0800348f 	.word	0x0800348f
 80032dc:	0800348f 	.word	0x0800348f
 80032e0:	0800348f 	.word	0x0800348f
 80032e4:	080033cb 	.word	0x080033cb
 80032e8:	0800348f 	.word	0x0800348f
 80032ec:	0800348f 	.word	0x0800348f
 80032f0:	0800348f 	.word	0x0800348f
 80032f4:	0800340d 	.word	0x0800340d
 80032f8:	0800348f 	.word	0x0800348f
 80032fc:	0800348f 	.word	0x0800348f
 8003300:	0800348f 	.word	0x0800348f
 8003304:	0800344d 	.word	0x0800344d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fb28 	bl	8003964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0208 	orr.w	r2, r2, #8
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	619a      	str	r2, [r3, #24]
      break;
 8003346:	e0a5      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb98 	bl	8003a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	021a      	lsls	r2, r3, #8
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	619a      	str	r2, [r3, #24]
      break;
 8003388:	e084      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fc01 	bl	8003b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0208 	orr.w	r2, r2, #8
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0204 	bic.w	r2, r2, #4
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	61da      	str	r2, [r3, #28]
      break;
 80033c8:	e064      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fc69 	bl	8003ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	021a      	lsls	r2, r3, #8
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	61da      	str	r2, [r3, #28]
      break;
 800340a:	e043      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fcb2 	bl	8003d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800344a:	e023      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fcf6 	bl	8003e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800348c:	e002      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
      break;
 8003492:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop

080034a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_ConfigClockSource+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0b6      	b.n	8003632 <HAL_TIM_ConfigClockSource+0x18a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003500:	d03e      	beq.n	8003580 <HAL_TIM_ConfigClockSource+0xd8>
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003506:	f200 8087 	bhi.w	8003618 <HAL_TIM_ConfigClockSource+0x170>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	f000 8086 	beq.w	800361e <HAL_TIM_ConfigClockSource+0x176>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	d87f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d01a      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0xaa>
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d87b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d050      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003524:	2b60      	cmp	r3, #96	; 0x60
 8003526:	d877      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d03c      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xfe>
 800352c:	2b50      	cmp	r3, #80	; 0x50
 800352e:	d873      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d058      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d86f      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d064      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 800353c:	2b30      	cmp	r3, #48	; 0x30
 800353e:	d86b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d060      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d867      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05c      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d05a      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x15e>
 8003550:	e062      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	f000 fd4f 	bl	8004004 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	609a      	str	r2, [r3, #8]
      break;
 800357e:	e04f      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	f000 fd38 	bl	8004004 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fcac 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2150      	movs	r1, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fd05 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 80035c4:	e02c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fccb 	bl	8003f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2160      	movs	r1, #96	; 0x60
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fcf5 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 80035e4:	e01c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 fc8c 	bl	8003f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fce5 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 8003604:	e00c      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fcdc 	bl	8003fce <TIM_ITRx_SetConfig>
      break;
 8003616:	e003      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e000      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800361e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	e02a      	b.n	80036f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2202      	movs	r2, #2
 80036ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b6:	e01d      	b.n	80036f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d107      	bne.n	80036d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2204      	movs	r2, #4
 80036c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d0:	e010      	b.n	80036f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d107      	bne.n	80036ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2208      	movs	r2, #8
 80036e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ea:	e003      	b.n	80036f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff ffb4 	bl	8003662 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	d10b      	bne.n	8003738 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d136      	bne.n	800379c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003736:	e031      	b.n	800379c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d10b      	bne.n	800375a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d125      	bne.n	800379c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	e020      	b.n	800379c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d10b      	bne.n	800377c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2204      	movs	r2, #4
 8003768:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d114      	bne.n	800379c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377a:	e00f      	b.n	800379c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d10a      	bne.n	800379c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff4c 	bl	800363a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d103      	bne.n	80037d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	771a      	strb	r2, [r3, #28]
 80037ce:	e019      	b.n	8003804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d103      	bne.n	80037e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	771a      	strb	r2, [r3, #28]
 80037e0:	e010      	b.n	8003804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d103      	bne.n	80037f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2204      	movs	r2, #4
 80037f0:	771a      	strb	r2, [r3, #28]
 80037f2:	e007      	b.n	8003804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d102      	bne.n	8003804 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2208      	movs	r2, #8
 8003802:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7ff ff22 	bl	800364e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a46      	ldr	r2, [pc, #280]	; (8003944 <TIM_Base_SetConfig+0x12c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a43      	ldr	r2, [pc, #268]	; (8003948 <TIM_Base_SetConfig+0x130>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a42      	ldr	r2, [pc, #264]	; (800394c <TIM_Base_SetConfig+0x134>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a41      	ldr	r2, [pc, #260]	; (8003950 <TIM_Base_SetConfig+0x138>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a40      	ldr	r2, [pc, #256]	; (8003954 <TIM_Base_SetConfig+0x13c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a35      	ldr	r2, [pc, #212]	; (8003944 <TIM_Base_SetConfig+0x12c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01f      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d01b      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a32      	ldr	r2, [pc, #200]	; (8003948 <TIM_Base_SetConfig+0x130>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d017      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a31      	ldr	r2, [pc, #196]	; (800394c <TIM_Base_SetConfig+0x134>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <TIM_Base_SetConfig+0x138>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00f      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <TIM_Base_SetConfig+0x13c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2e      	ldr	r2, [pc, #184]	; (8003958 <TIM_Base_SetConfig+0x140>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2d      	ldr	r2, [pc, #180]	; (800395c <TIM_Base_SetConfig+0x144>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0x9a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <TIM_Base_SetConfig+0x148>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a16      	ldr	r2, [pc, #88]	; (8003944 <TIM_Base_SetConfig+0x12c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00f      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <TIM_Base_SetConfig+0x13c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00b      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <TIM_Base_SetConfig+0x140>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d007      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <TIM_Base_SetConfig+0x144>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_Base_SetConfig+0xf8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <TIM_Base_SetConfig+0x148>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d103      	bne.n	8003918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d105      	bne.n	8003936 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]
  }
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40013400 	.word	0x40013400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f023 0201 	bic.w	r2, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 0302 	bic.w	r3, r3, #2
 80039b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2c      	ldr	r2, [pc, #176]	; (8003a70 <TIM_OC1_SetConfig+0x10c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <TIM_OC1_SetConfig+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <TIM_OC1_SetConfig+0x110>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_OC1_SetConfig+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <TIM_OC1_SetConfig+0x114>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_OC1_SetConfig+0x80>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <TIM_OC1_SetConfig+0x118>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC1_SetConfig+0x80>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <TIM_OC1_SetConfig+0x11c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10c      	bne.n	80039fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0308 	bic.w	r3, r3, #8
 80039ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <TIM_OC1_SetConfig+0x10c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_OC1_SetConfig+0xc2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1a      	ldr	r2, [pc, #104]	; (8003a74 <TIM_OC1_SetConfig+0x110>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_OC1_SetConfig+0xc2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <TIM_OC1_SetConfig+0x114>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_OC1_SetConfig+0xc2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <TIM_OC1_SetConfig+0x118>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_OC1_SetConfig+0xc2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <TIM_OC1_SetConfig+0x11c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d111      	bne.n	8003a4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	621a      	str	r2, [r3, #32]
}
 8003a64:	bf00      	nop
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800

08003a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0210 	bic.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0320 	bic.w	r3, r3, #32
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a28      	ldr	r2, [pc, #160]	; (8003b84 <TIM_OC2_SetConfig+0x100>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC2_SetConfig+0x6c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <TIM_OC2_SetConfig+0x104>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10d      	bne.n	8003b0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <TIM_OC2_SetConfig+0x100>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00f      	beq.n	8003b34 <TIM_OC2_SetConfig+0xb0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <TIM_OC2_SetConfig+0x104>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <TIM_OC2_SetConfig+0xb0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <TIM_OC2_SetConfig+0x108>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_OC2_SetConfig+0xb0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <TIM_OC2_SetConfig+0x10c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_OC2_SetConfig+0xb0>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <TIM_OC2_SetConfig+0x110>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d113      	bne.n	8003b5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800

08003b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <TIM_OC3_SetConfig+0xfc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_OC3_SetConfig+0x6a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <TIM_OC3_SetConfig+0x100>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10d      	bne.n	8003c1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <TIM_OC3_SetConfig+0xfc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_OC3_SetConfig+0xae>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <TIM_OC3_SetConfig+0x100>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_OC3_SetConfig+0xae>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <TIM_OC3_SetConfig+0x104>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_OC3_SetConfig+0xae>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <TIM_OC3_SetConfig+0x108>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_OC3_SetConfig+0xae>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a18      	ldr	r2, [pc, #96]	; (8003ca4 <TIM_OC3_SetConfig+0x10c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d113      	bne.n	8003c6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40013400 	.word	0x40013400
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	031b      	lsls	r3, r3, #12
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <TIM_OC4_SetConfig+0xc0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00f      	beq.n	8003d2c <TIM_OC4_SetConfig+0x84>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <TIM_OC4_SetConfig+0xc4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <TIM_OC4_SetConfig+0x84>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <TIM_OC4_SetConfig+0xc8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_OC4_SetConfig+0x84>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <TIM_OC4_SetConfig+0xcc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC4_SetConfig+0x84>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <TIM_OC4_SetConfig+0xd0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40013400 	.word	0x40013400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400
 8003d78:	40014800 	.word	0x40014800

08003d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <TIM_OC5_SetConfig+0xb4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00f      	beq.n	8003df6 <TIM_OC5_SetConfig+0x7a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <TIM_OC5_SetConfig+0xb8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00b      	beq.n	8003df6 <TIM_OC5_SetConfig+0x7a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <TIM_OC5_SetConfig+0xbc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <TIM_OC5_SetConfig+0x7a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <TIM_OC5_SetConfig+0xc0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC5_SetConfig+0x7a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <TIM_OC5_SetConfig+0xc4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d109      	bne.n	8003e0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	621a      	str	r2, [r3, #32]
}
 8003e24:	bf00      	nop
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40013400 	.word	0x40013400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800

08003e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	051b      	lsls	r3, r3, #20
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <TIM_OC6_SetConfig+0xb8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00f      	beq.n	8003ec0 <TIM_OC6_SetConfig+0x7c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <TIM_OC6_SetConfig+0xbc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_OC6_SetConfig+0x7c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <TIM_OC6_SetConfig+0xc0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_OC6_SetConfig+0x7c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <TIM_OC6_SetConfig+0xc4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_OC6_SetConfig+0x7c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <TIM_OC6_SetConfig+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d109      	bne.n	8003ed4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	029b      	lsls	r3, r3, #10
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40013400 	.word	0x40013400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800

08003f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 030a 	bic.w	r3, r3, #10
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b087      	sub	sp, #28
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f023 0210 	bic.w	r2, r3, #16
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b085      	sub	sp, #20
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f043 0307 	orr.w	r3, r3, #7
 8003ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800401e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	431a      	orrs	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2201      	movs	r2, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e068      	b.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2e      	ldr	r2, [pc, #184]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2d      	ldr	r2, [pc, #180]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d018      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a13      	ldr	r2, [pc, #76]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a14      	ldr	r2, [pc, #80]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10c      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4313      	orrs	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40013400 	.word	0x40013400
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40000c00 	.word	0x40000c00
 800419c:	40014000 	.word	0x40014000

080041a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e040      	b.n	8004234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fc2c 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fae0 	bl	80047ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f825 	bl	800423c <UART_SetConfig>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e01b      	b.n	8004234 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fb5f 	bl	80048f0 <UART_CheckIdleState>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b08a      	sub	sp, #40	; 0x28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	431a      	orrs	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	431a      	orrs	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4313      	orrs	r3, r2
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4ba4      	ldr	r3, [pc, #656]	; (80044fc <UART_SetConfig+0x2c0>)
 800426c:	4013      	ands	r3, r2
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004274:	430b      	orrs	r3, r1
 8004276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a99      	ldr	r2, [pc, #612]	; (8004500 <UART_SetConfig+0x2c4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a4:	4313      	orrs	r3, r2
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	430a      	orrs	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a90      	ldr	r2, [pc, #576]	; (8004504 <UART_SetConfig+0x2c8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d126      	bne.n	8004314 <UART_SetConfig+0xd8>
 80042c6:	4b90      	ldr	r3, [pc, #576]	; (8004508 <UART_SetConfig+0x2cc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d81b      	bhi.n	800430c <UART_SetConfig+0xd0>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0xa0>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042fd 	.word	0x080042fd
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004305 	.word	0x08004305
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e116      	b.n	8004522 <UART_SetConfig+0x2e6>
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e112      	b.n	8004522 <UART_SetConfig+0x2e6>
 80042fc:	2304      	movs	r3, #4
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e10e      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004304:	2308      	movs	r3, #8
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e10a      	b.n	8004522 <UART_SetConfig+0x2e6>
 800430c:	2310      	movs	r3, #16
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e106      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7c      	ldr	r2, [pc, #496]	; (800450c <UART_SetConfig+0x2d0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d138      	bne.n	8004390 <UART_SetConfig+0x154>
 800431e:	4b7a      	ldr	r3, [pc, #488]	; (8004508 <UART_SetConfig+0x2cc>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b0c      	cmp	r3, #12
 800432a:	d82d      	bhi.n	8004388 <UART_SetConfig+0x14c>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0xf8>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004369 	.word	0x08004369
 8004338:	08004389 	.word	0x08004389
 800433c:	08004389 	.word	0x08004389
 8004340:	08004389 	.word	0x08004389
 8004344:	08004379 	.word	0x08004379
 8004348:	08004389 	.word	0x08004389
 800434c:	08004389 	.word	0x08004389
 8004350:	08004389 	.word	0x08004389
 8004354:	08004371 	.word	0x08004371
 8004358:	08004389 	.word	0x08004389
 800435c:	08004389 	.word	0x08004389
 8004360:	08004389 	.word	0x08004389
 8004364:	08004381 	.word	0x08004381
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e0d8      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004370:	2302      	movs	r3, #2
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	e0d4      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004378:	2304      	movs	r3, #4
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e0d0      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004380:	2308      	movs	r3, #8
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e0cc      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004388:	2310      	movs	r3, #16
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e0c8      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <UART_SetConfig+0x2d4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d125      	bne.n	80043e6 <UART_SetConfig+0x1aa>
 800439a:	4b5b      	ldr	r3, [pc, #364]	; (8004508 <UART_SetConfig+0x2cc>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d016      	beq.n	80043d6 <UART_SetConfig+0x19a>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d818      	bhi.n	80043de <UART_SetConfig+0x1a2>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d00a      	beq.n	80043c6 <UART_SetConfig+0x18a>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d814      	bhi.n	80043de <UART_SetConfig+0x1a2>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <UART_SetConfig+0x182>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d008      	beq.n	80043ce <UART_SetConfig+0x192>
 80043bc:	e00f      	b.n	80043de <UART_SetConfig+0x1a2>
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c4:	e0ad      	b.n	8004522 <UART_SetConfig+0x2e6>
 80043c6:	2302      	movs	r3, #2
 80043c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043cc:	e0a9      	b.n	8004522 <UART_SetConfig+0x2e6>
 80043ce:	2304      	movs	r3, #4
 80043d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d4:	e0a5      	b.n	8004522 <UART_SetConfig+0x2e6>
 80043d6:	2308      	movs	r3, #8
 80043d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043dc:	e0a1      	b.n	8004522 <UART_SetConfig+0x2e6>
 80043de:	2310      	movs	r3, #16
 80043e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e4:	e09d      	b.n	8004522 <UART_SetConfig+0x2e6>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a4a      	ldr	r2, [pc, #296]	; (8004514 <UART_SetConfig+0x2d8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d125      	bne.n	800443c <UART_SetConfig+0x200>
 80043f0:	4b45      	ldr	r3, [pc, #276]	; (8004508 <UART_SetConfig+0x2cc>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043fa:	2bc0      	cmp	r3, #192	; 0xc0
 80043fc:	d016      	beq.n	800442c <UART_SetConfig+0x1f0>
 80043fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004400:	d818      	bhi.n	8004434 <UART_SetConfig+0x1f8>
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d00a      	beq.n	800441c <UART_SetConfig+0x1e0>
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d814      	bhi.n	8004434 <UART_SetConfig+0x1f8>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <UART_SetConfig+0x1d8>
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d008      	beq.n	8004424 <UART_SetConfig+0x1e8>
 8004412:	e00f      	b.n	8004434 <UART_SetConfig+0x1f8>
 8004414:	2300      	movs	r3, #0
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e082      	b.n	8004522 <UART_SetConfig+0x2e6>
 800441c:	2302      	movs	r3, #2
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e07e      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004424:	2304      	movs	r3, #4
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e07a      	b.n	8004522 <UART_SetConfig+0x2e6>
 800442c:	2308      	movs	r3, #8
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004432:	e076      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004434:	2310      	movs	r3, #16
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443a:	e072      	b.n	8004522 <UART_SetConfig+0x2e6>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	; (8004518 <UART_SetConfig+0x2dc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d12a      	bne.n	800449c <UART_SetConfig+0x260>
 8004446:	4b30      	ldr	r3, [pc, #192]	; (8004508 <UART_SetConfig+0x2cc>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004454:	d01a      	beq.n	800448c <UART_SetConfig+0x250>
 8004456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445a:	d81b      	bhi.n	8004494 <UART_SetConfig+0x258>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d00c      	beq.n	800447c <UART_SetConfig+0x240>
 8004462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004466:	d815      	bhi.n	8004494 <UART_SetConfig+0x258>
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <UART_SetConfig+0x238>
 800446c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004470:	d008      	beq.n	8004484 <UART_SetConfig+0x248>
 8004472:	e00f      	b.n	8004494 <UART_SetConfig+0x258>
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e052      	b.n	8004522 <UART_SetConfig+0x2e6>
 800447c:	2302      	movs	r3, #2
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e04e      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004484:	2304      	movs	r3, #4
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e04a      	b.n	8004522 <UART_SetConfig+0x2e6>
 800448c:	2308      	movs	r3, #8
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e046      	b.n	8004522 <UART_SetConfig+0x2e6>
 8004494:	2310      	movs	r3, #16
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e042      	b.n	8004522 <UART_SetConfig+0x2e6>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a17      	ldr	r2, [pc, #92]	; (8004500 <UART_SetConfig+0x2c4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d13a      	bne.n	800451c <UART_SetConfig+0x2e0>
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <UART_SetConfig+0x2cc>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b4:	d01a      	beq.n	80044ec <UART_SetConfig+0x2b0>
 80044b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044ba:	d81b      	bhi.n	80044f4 <UART_SetConfig+0x2b8>
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c0:	d00c      	beq.n	80044dc <UART_SetConfig+0x2a0>
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c6:	d815      	bhi.n	80044f4 <UART_SetConfig+0x2b8>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <UART_SetConfig+0x298>
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d008      	beq.n	80044e4 <UART_SetConfig+0x2a8>
 80044d2:	e00f      	b.n	80044f4 <UART_SetConfig+0x2b8>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e022      	b.n	8004522 <UART_SetConfig+0x2e6>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e01e      	b.n	8004522 <UART_SetConfig+0x2e6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e01a      	b.n	8004522 <UART_SetConfig+0x2e6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e016      	b.n	8004522 <UART_SetConfig+0x2e6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e012      	b.n	8004522 <UART_SetConfig+0x2e6>
 80044fc:	efff69f3 	.word	0xefff69f3
 8004500:	40008000 	.word	0x40008000
 8004504:	40013800 	.word	0x40013800
 8004508:	40021000 	.word	0x40021000
 800450c:	40004400 	.word	0x40004400
 8004510:	40004800 	.word	0x40004800
 8004514:	40004c00 	.word	0x40004c00
 8004518:	40005000 	.word	0x40005000
 800451c:	2310      	movs	r3, #16
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a9f      	ldr	r2, [pc, #636]	; (80047a4 <UART_SetConfig+0x568>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d17a      	bne.n	8004622 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800452c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004530:	2b08      	cmp	r3, #8
 8004532:	d824      	bhi.n	800457e <UART_SetConfig+0x342>
 8004534:	a201      	add	r2, pc, #4	; (adr r2, 800453c <UART_SetConfig+0x300>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004561 	.word	0x08004561
 8004540:	0800457f 	.word	0x0800457f
 8004544:	08004569 	.word	0x08004569
 8004548:	0800457f 	.word	0x0800457f
 800454c:	0800456f 	.word	0x0800456f
 8004550:	0800457f 	.word	0x0800457f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800457f 	.word	0x0800457f
 800455c:	08004577 	.word	0x08004577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004560:	f7fd fe04 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8004564:	61f8      	str	r0, [r7, #28]
        break;
 8004566:	e010      	b.n	800458a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004568:	4b8f      	ldr	r3, [pc, #572]	; (80047a8 <UART_SetConfig+0x56c>)
 800456a:	61fb      	str	r3, [r7, #28]
        break;
 800456c:	e00d      	b.n	800458a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456e:	f7fd fd65 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8004572:	61f8      	str	r0, [r7, #28]
        break;
 8004574:	e009      	b.n	800458a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457a:	61fb      	str	r3, [r7, #28]
        break;
 800457c:	e005      	b.n	800458a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004588:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80fb 	beq.w	8004788 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	4413      	add	r3, r2
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d305      	bcc.n	80045ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d903      	bls.n	80045b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045b4:	e0e8      	b.n	8004788 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2200      	movs	r2, #0
 80045ba:	461c      	mov	r4, r3
 80045bc:	4615      	mov	r5, r2
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	022b      	lsls	r3, r5, #8
 80045c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045cc:	0222      	lsls	r2, r4, #8
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	6849      	ldr	r1, [r1, #4]
 80045d2:	0849      	lsrs	r1, r1, #1
 80045d4:	2000      	movs	r0, #0
 80045d6:	4688      	mov	r8, r1
 80045d8:	4681      	mov	r9, r0
 80045da:	eb12 0a08 	adds.w	sl, r2, r8
 80045de:	eb43 0b09 	adc.w	fp, r3, r9
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f0:	4650      	mov	r0, sl
 80045f2:	4659      	mov	r1, fp
 80045f4:	f7fb fde8 	bl	80001c8 <__aeabi_uldivmod>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4613      	mov	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004606:	d308      	bcc.n	800461a <UART_SetConfig+0x3de>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460e:	d204      	bcs.n	800461a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e0b6      	b.n	8004788 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004620:	e0b2      	b.n	8004788 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462a:	d15e      	bne.n	80046ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800462c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004630:	2b08      	cmp	r3, #8
 8004632:	d828      	bhi.n	8004686 <UART_SetConfig+0x44a>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0x400>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004661 	.word	0x08004661
 8004640:	08004669 	.word	0x08004669
 8004644:	08004671 	.word	0x08004671
 8004648:	08004687 	.word	0x08004687
 800464c:	08004677 	.word	0x08004677
 8004650:	08004687 	.word	0x08004687
 8004654:	08004687 	.word	0x08004687
 8004658:	08004687 	.word	0x08004687
 800465c:	0800467f 	.word	0x0800467f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7fd fd84 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8004664:	61f8      	str	r0, [r7, #28]
        break;
 8004666:	e014      	b.n	8004692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7fd fd96 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 800466c:	61f8      	str	r0, [r7, #28]
        break;
 800466e:	e010      	b.n	8004692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004670:	4b4d      	ldr	r3, [pc, #308]	; (80047a8 <UART_SetConfig+0x56c>)
 8004672:	61fb      	str	r3, [r7, #28]
        break;
 8004674:	e00d      	b.n	8004692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004676:	f7fd fce1 	bl	800203c <HAL_RCC_GetSysClockFreq>
 800467a:	61f8      	str	r0, [r7, #28]
        break;
 800467c:	e009      	b.n	8004692 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004682:	61fb      	str	r3, [r7, #28]
        break;
 8004684:	e005      	b.n	8004692 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d077      	beq.n	8004788 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005a      	lsls	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	441a      	add	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b0f      	cmp	r3, #15
 80046b2:	d916      	bls.n	80046e2 <UART_SetConfig+0x4a6>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ba:	d212      	bcs.n	80046e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f023 030f 	bic.w	r3, r3, #15
 80046c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	8afa      	ldrh	r2, [r7, #22]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e052      	b.n	8004788 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046e8:	e04e      	b.n	8004788 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d827      	bhi.n	8004742 <UART_SetConfig+0x506>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x4bc>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004725 	.word	0x08004725
 8004700:	0800472d 	.word	0x0800472d
 8004704:	08004743 	.word	0x08004743
 8004708:	08004733 	.word	0x08004733
 800470c:	08004743 	.word	0x08004743
 8004710:	08004743 	.word	0x08004743
 8004714:	08004743 	.word	0x08004743
 8004718:	0800473b 	.word	0x0800473b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7fd fd26 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 8004720:	61f8      	str	r0, [r7, #28]
        break;
 8004722:	e014      	b.n	800474e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004724:	f7fd fd38 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 8004728:	61f8      	str	r0, [r7, #28]
        break;
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <UART_SetConfig+0x56c>)
 800472e:	61fb      	str	r3, [r7, #28]
        break;
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7fd fc83 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8004736:	61f8      	str	r0, [r7, #28]
        break;
 8004738:	e009      	b.n	800474e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	61fb      	str	r3, [r7, #28]
        break;
 8004740:	e005      	b.n	800474e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800474c:	bf00      	nop
    }

    if (pclk != 0U)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d019      	beq.n	8004788 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	085a      	lsrs	r2, r3, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	441a      	add	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	d909      	bls.n	8004782 <UART_SetConfig+0x546>
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d205      	bcs.n	8004782 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e002      	b.n	8004788 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a2:	bf00      	nop
 80047a4:	40008000 	.word	0x40008000
 80047a8:	00f42400 	.word	0x00f42400

080047ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048aa:	d10a      	bne.n	80048c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b098      	sub	sp, #96	; 0x60
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004900:	f7fc f984 	bl	8000c0c <HAL_GetTick>
 8004904:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d12e      	bne.n	8004972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f88c 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d021      	beq.n	8004972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004942:	653b      	str	r3, [r7, #80]	; 0x50
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e062      	b.n	8004a38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d149      	bne.n	8004a14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004988:	2200      	movs	r2, #0
 800498a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f856 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d03c      	beq.n	8004a14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	623b      	str	r3, [r7, #32]
   return(result);
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60fb      	str	r3, [r7, #12]
   return(result);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ec:	61fa      	str	r2, [r7, #28]
 80049ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	617b      	str	r3, [r7, #20]
   return(result);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e011      	b.n	8004a38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3758      	adds	r7, #88	; 0x58
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	e04f      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d04b      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fc f8d7 	bl	8000c0c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e04e      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d037      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d034      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d031      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d110      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f838 	bl	8004b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2208      	movs	r2, #8
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e029      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004acc:	d111      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f81e 	bl	8004b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d0a0      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b095      	sub	sp, #84	; 0x54
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b40:	643b      	str	r3, [r7, #64]	; 0x40
 8004b42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d118      	bne.n	8004bc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6979      	ldr	r1, [r7, #20]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	613b      	str	r3, [r7, #16]
   return(result);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bd6:	bf00      	nop
 8004bd8:	3754      	adds	r7, #84	; 0x54
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <memset>:
 8004be2:	4402      	add	r2, r0
 8004be4:	4603      	mov	r3, r0
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d100      	bne.n	8004bec <memset+0xa>
 8004bea:	4770      	bx	lr
 8004bec:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf0:	e7f9      	b.n	8004be6 <memset+0x4>
	...

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4d0d      	ldr	r5, [pc, #52]	; (8004c2c <__libc_init_array+0x38>)
 8004bf8:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	2600      	movs	r6, #0
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	4d0b      	ldr	r5, [pc, #44]	; (8004c34 <__libc_init_array+0x40>)
 8004c06:	4c0c      	ldr	r4, [pc, #48]	; (8004c38 <__libc_init_array+0x44>)
 8004c08:	f000 f818 	bl	8004c3c <_init>
 8004c0c:	1b64      	subs	r4, r4, r5
 8004c0e:	10a4      	asrs	r4, r4, #2
 8004c10:	2600      	movs	r6, #0
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08004ca4 	.word	0x08004ca4
 8004c30:	08004ca4 	.word	0x08004ca4
 8004c34:	08004ca4 	.word	0x08004ca4
 8004c38:	08004ca8 	.word	0x08004ca8

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
