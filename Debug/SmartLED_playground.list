
SmartLED_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e88  08004e88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e90  08004e90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08004ea4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004ea4  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001254e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a46  00000000  00000000  000325cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d79  00000000  00000000  00036168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270c8  00000000  00000000  00036ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016354  00000000  00000000  0005dfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0f33  00000000  00000000  000742fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047c0  00000000  00000000  00165230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  001699f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e28 	.word	0x08004e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e28 	.word	0x08004e28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x38>)
 80004cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x38>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6493      	str	r3, [r2, #72]	; 0x48
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x38>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2010      	movs	r0, #16
 80004e8:	f000 fe35 	bl	8001156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004ec:	2010      	movs	r0, #16
 80004ee:	f000 fe4e 	bl	800118e <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_GPIO_Init+0x9c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_GPIO_Init+0x9c>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_GPIO_Init+0x9c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0x9c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a1a      	ldr	r2, [pc, #104]	; (800059c <MX_GPIO_Init+0x9c>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_GPIO_Init+0x9c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_GPIO_Init+0x9c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <MX_GPIO_Init+0x9c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_GPIO_Init+0x9c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_GPIO_Init+0x9c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <MX_GPIO_Init+0x9c>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_GPIO_Init+0x9c>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_GPIO_Init+0xa0>)
 800058e:	f000 ff81 	bl	8001494 <HAL_GPIO_Init>

}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000800 	.word	0x48000800

080005a4 <led_init>:
//Array contains info about all of the available LED units
led_color_t led_array[NUMBER_OF_LEDS];
uint8_t buffer[40+NUMBER_OF_LEDS*24+1] = {0};

void led_init(SPI_HandleTypeDef* spi_handler)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_SPI_Init(&hspi1);
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <led_init+0x34>)
 80005ae:	f002 fc3b 	bl	8002e28 <HAL_SPI_Init>
	for(int i = 40; i < 40+NUMBER_OF_LEDS*24+1; i++)
 80005b2:	2328      	movs	r3, #40	; 0x28
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e007      	b.n	80005c8 <led_init+0x24>
	{
		buffer[i] = ZERO;
 80005b8:	4a08      	ldr	r2, [pc, #32]	; (80005dc <led_init+0x38>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4413      	add	r3, r2
 80005be:	2220      	movs	r2, #32
 80005c0:	701a      	strb	r2, [r3, #0]
	for(int i = 40; i < 40+NUMBER_OF_LEDS*24+1; i++)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3301      	adds	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	2be8      	cmp	r3, #232	; 0xe8
 80005cc:	ddf4      	ble.n	80005b8 <led_init+0x14>
	}
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000012c 	.word	0x2000012c
 80005dc:	20000040 	.word	0x20000040

080005e0 <led_setDiodeColor>:


void led_setDiodeColor(int16_t diode_id, led_color_t color)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	80fb      	strh	r3, [r7, #6]
	if(diode_id >= NUMBER_OF_LEDS-1 || diode_id < 0) return;
 80005ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	f300 8093 	bgt.w	800071c <led_setDiodeColor+0x13c>
 80005f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f2c0 808e 	blt.w	800071c <led_setDiodeColor+0x13c>
	led_array[diode_id] = color;
 8000600:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000604:	4948      	ldr	r1, [pc, #288]	; (8000728 <led_setDiodeColor+0x148>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	440b      	add	r3, r1
 800060e:	461a      	mov	r2, r3
 8000610:	463b      	mov	r3, r7
 8000612:	8819      	ldrh	r1, [r3, #0]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	8011      	strh	r1, [r2, #0]
 8000618:	7093      	strb	r3, [r2, #2]

	for(int i = 40+24*diode_id; i < 40+24*diode_id+24; i++)
 800061a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	3328      	adds	r3, #40	; 0x28
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e007      	b.n	800063c <led_setDiodeColor+0x5c>
	{
		buffer[i] = ZERO;
 800062c:	4a3f      	ldr	r2, [pc, #252]	; (800072c <led_setDiodeColor+0x14c>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	2220      	movs	r2, #32
 8000634:	701a      	strb	r2, [r3, #0]
	for(int i = 40+24*diode_id; i < 40+24*diode_id+24; i++)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	333f      	adds	r3, #63	; 0x3f
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	429a      	cmp	r2, r3
 800064e:	dded      	ble.n	800062c <led_setDiodeColor+0x4c>
	}

	if(color.green == 1)
 8000650:	787b      	ldrb	r3, [r7, #1]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d11e      	bne.n	8000694 <led_setDiodeColor+0xb4>
	{
		buffer[40+24*diode_id] = ONE;
 8000656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800065a:	4613      	mov	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	3328      	adds	r3, #40	; 0x28
 8000664:	4a31      	ldr	r2, [pc, #196]	; (800072c <led_setDiodeColor+0x14c>)
 8000666:	2138      	movs	r1, #56	; 0x38
 8000668:	54d1      	strb	r1, [r2, r3]
		buffer[48+24*diode_id] = ZERO;
 800066a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	3330      	adds	r3, #48	; 0x30
 8000678:	4a2c      	ldr	r2, [pc, #176]	; (800072c <led_setDiodeColor+0x14c>)
 800067a:	2120      	movs	r1, #32
 800067c:	54d1      	strb	r1, [r2, r3]
		buffer[56+24*diode_id] = ZERO;
 800067e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	3338      	adds	r3, #56	; 0x38
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <led_setDiodeColor+0x14c>)
 800068e:	2120      	movs	r1, #32
 8000690:	54d1      	strb	r1, [r2, r3]
 8000692:	e044      	b.n	800071e <led_setDiodeColor+0x13e>
	}
	else if(color.red == 1)
 8000694:	783b      	ldrb	r3, [r7, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d11e      	bne.n	80006d8 <led_setDiodeColor+0xf8>
	{
		buffer[40+24*diode_id] = ZERO;
 800069a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800069e:	4613      	mov	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	3328      	adds	r3, #40	; 0x28
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <led_setDiodeColor+0x14c>)
 80006aa:	2120      	movs	r1, #32
 80006ac:	54d1      	strb	r1, [r2, r3]
		buffer[48+24*diode_id] = ONE;
 80006ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	3330      	adds	r3, #48	; 0x30
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <led_setDiodeColor+0x14c>)
 80006be:	2138      	movs	r1, #56	; 0x38
 80006c0:	54d1      	strb	r1, [r2, r3]
		buffer[56+24*diode_id] = ZERO;
 80006c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	3338      	adds	r3, #56	; 0x38
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <led_setDiodeColor+0x14c>)
 80006d2:	2120      	movs	r1, #32
 80006d4:	54d1      	strb	r1, [r2, r3]
 80006d6:	e022      	b.n	800071e <led_setDiodeColor+0x13e>
	}
	else if(color.blue == 1)
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d11f      	bne.n	800071e <led_setDiodeColor+0x13e>
	{
		buffer[40+24*diode_id] = ZERO;
 80006de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	3328      	adds	r3, #40	; 0x28
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <led_setDiodeColor+0x14c>)
 80006ee:	2120      	movs	r1, #32
 80006f0:	54d1      	strb	r1, [r2, r3]
		buffer[48+24*diode_id] = ZERO;
 80006f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	3330      	adds	r3, #48	; 0x30
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <led_setDiodeColor+0x14c>)
 8000702:	2120      	movs	r1, #32
 8000704:	54d1      	strb	r1, [r2, r3]
		buffer[56+24*diode_id] = ONE;
 8000706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	3338      	adds	r3, #56	; 0x38
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <led_setDiodeColor+0x14c>)
 8000716:	2138      	movs	r1, #56	; 0x38
 8000718:	54d1      	strb	r1, [r2, r3]
 800071a:	e000      	b.n	800071e <led_setDiodeColor+0x13e>
	if(diode_id >= NUMBER_OF_LEDS-1 || diode_id < 0) return;
 800071c:	bf00      	nop
	}




}
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000028 	.word	0x20000028
 800072c:	20000040 	.word	0x20000040

08000730 <led_update>:

void led_update()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi1, &buffer, sizeof(buffer), 1000);
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	22e9      	movs	r2, #233	; 0xe9
 800073a:	4903      	ldr	r1, [pc, #12]	; (8000748 <led_update+0x18>)
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <led_update+0x1c>)
 800073e:	f002 fc16 	bl	8002f6e <HAL_SPI_Transmit>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000040 	.word	0x20000040
 800074c:	2000012c 	.word	0x2000012c

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 fb8a 	bl	8000e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f895 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff fecf 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000762:	f7ff feaf 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000766:	f000 facd 	bl	8000d04 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800076a:	f000 f9cd 	bl	8000b08 <MX_TIM3_Init>
  MX_SPI1_Init();
 800076e:	f000 f8e1 	bl	8000934 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  led_init(&hspi1);
 8000772:	4844      	ldr	r0, [pc, #272]	; (8000884 <main+0x134>)
 8000774:	f7ff ff16 	bl	80005a4 <led_init>

  led_color_t first_led_color;
  first_led_color.green = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	777b      	strb	r3, [r7, #29]
  first_led_color.red = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	773b      	strb	r3, [r7, #28]
  first_led_color.blue = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	77bb      	strb	r3, [r7, #30]

  led_color_t second_led_color;
  second_led_color.green = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	76bb      	strb	r3, [r7, #26]

  led_color_t third_led_color;
  second_led_color.green = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	76bb      	strb	r3, [r7, #26]

  led_color_t fourth_led_color;
  second_led_color.green = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	76bb      	strb	r3, [r7, #26]

  led_color_t fifth_led_color;
  second_led_color.green = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	76bb      	strb	r3, [r7, #26]

  led_color_t sixth_led_color;
  second_led_color.green = 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	76bb      	strb	r3, [r7, #26]

  led_color_t seventh_led_color;
  second_led_color.green = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	76bb      	strb	r3, [r7, #26]

  led_color_t eightth_led_color;
  second_led_color.green = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	767b      	strb	r3, [r7, #25]
  second_led_color.red = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	763b      	strb	r3, [r7, #24]
  second_led_color.blue = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	76bb      	strb	r3, [r7, #26]



  led_setDiodeColor(0, first_led_color);
 80007d8:	69f9      	ldr	r1, [r7, #28]
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff00 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(1, second_led_color);
 80007e0:	69b9      	ldr	r1, [r7, #24]
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff fefc 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(2, third_led_color);
 80007e8:	6979      	ldr	r1, [r7, #20]
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff fef8 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(3, fourth_led_color);
 80007f0:	6939      	ldr	r1, [r7, #16]
 80007f2:	2003      	movs	r0, #3
 80007f4:	f7ff fef4 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(4, fifth_led_color);
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	2004      	movs	r0, #4
 80007fc:	f7ff fef0 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(5, sixth_led_color);
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	2005      	movs	r0, #5
 8000804:	f7ff feec 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(6, seventh_led_color);
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	2006      	movs	r0, #6
 800080c:	f7ff fee8 	bl	80005e0 <led_setDiodeColor>
  led_setDiodeColor(7, eightth_led_color);
 8000810:	6839      	ldr	r1, [r7, #0]
 8000812:	2007      	movs	r0, #7
 8000814:	f7ff fee4 	bl	80005e0 <led_setDiodeColor>
  led_update();
 8000818:	f7ff ff8a 	bl	8000730 <led_update>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  first_led_color.green = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	777b      	strb	r3, [r7, #29]
	  first_led_color.red = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	773b      	strb	r3, [r7, #28]
	  first_led_color.blue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	77bb      	strb	r3, [r7, #30]
	  second_led_color.green = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	767b      	strb	r3, [r7, #25]
	  second_led_color.red = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	763b      	strb	r3, [r7, #24]
	  second_led_color.blue = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	76bb      	strb	r3, [r7, #26]
	  led_setDiodeColor(0, first_led_color);
 8000834:	69f9      	ldr	r1, [r7, #28]
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff fed2 	bl	80005e0 <led_setDiodeColor>
	  led_setDiodeColor(1, second_led_color);
 800083c:	69b9      	ldr	r1, [r7, #24]
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fece 	bl	80005e0 <led_setDiodeColor>
	  led_update();
 8000844:	f7ff ff74 	bl	8000730 <led_update>
	  HAL_Delay(200);
 8000848:	20c8      	movs	r0, #200	; 0xc8
 800084a:	f000 fb85 	bl	8000f58 <HAL_Delay>

	  first_led_color.green = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	777b      	strb	r3, [r7, #29]
	  first_led_color.red = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	773b      	strb	r3, [r7, #28]
	  first_led_color.blue = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	77bb      	strb	r3, [r7, #30]
	  second_led_color.green = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	767b      	strb	r3, [r7, #25]
	  second_led_color.red = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	763b      	strb	r3, [r7, #24]
	  second_led_color.blue = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	76bb      	strb	r3, [r7, #26]
	  led_setDiodeColor(0, first_led_color);
 8000866:	69f9      	ldr	r1, [r7, #28]
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff feb9 	bl	80005e0 <led_setDiodeColor>
	  led_setDiodeColor(1, second_led_color);
 800086e:	69b9      	ldr	r1, [r7, #24]
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff feb5 	bl	80005e0 <led_setDiodeColor>
	  led_update();
 8000876:	f7ff ff5b 	bl	8000730 <led_update>
	  HAL_Delay(200);
 800087a:	20c8      	movs	r0, #200	; 0xc8
 800087c:	f000 fb6c 	bl	8000f58 <HAL_Delay>
	  first_led_color.green = 1;
 8000880:	e7cc      	b.n	800081c <main+0xcc>
 8000882:	bf00      	nop
 8000884:	2000012c 	.word	0x2000012c

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b096      	sub	sp, #88	; 0x58
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2244      	movs	r2, #68	; 0x44
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fa99 	bl	8004dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ae:	f000 ffa9 	bl	8001804 <HAL_PWREx_ControlVoltageScaling>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008b8:	f000 f837 	bl	800092a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2310      	movs	r3, #16
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ce:	2302      	movs	r3, #2
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 80008d6:	2309      	movs	r3, #9
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008da:	2307      	movs	r3, #7
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80008e2:	2306      	movs	r3, #6
 80008e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 ffe0 	bl	80018b0 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008f6:	f000 f818 	bl	800092a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fba8 	bl	8002068 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800091e:	f000 f804 	bl	800092a <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3758      	adds	r7, #88	; 0x58
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x8>

08000934 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_SPI1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_SPI1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_6BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI1_Init+0x74>)
 800094e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000952:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000966:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI1_Init+0x74>)
 800096a:	2208      	movs	r2, #8
 800096c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI1_Init+0x74>)
 800098e:	2208      	movs	r2, #8
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000994:	f002 fa48 	bl	8002e28 <HAL_SPI_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f7ff ffc4 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000012c 	.word	0x2000012c
 80009ac:	40013000 	.word	0x40013000

080009b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_SPI_MspInit+0x7c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d128      	bne.n	8000a24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x80>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <HAL_SPI_MspInit+0x80>)
 80009d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009dc:	6613      	str	r3, [r2, #96]	; 0x60
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_SPI_MspInit+0x80>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x80>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_SPI_MspInit+0x80>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_SPI_MspInit+0x80>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a02:	23a0      	movs	r3, #160	; 0xa0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a12:	2305      	movs	r3, #5
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f000 fd38 	bl	8001494 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	; 0x60
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 fa26 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ad6:	f000 fc2d 	bl	8001334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200001dc 	.word	0x200001dc

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b3c:	4a2c      	ldr	r2, [pc, #176]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b4e:	2263      	movs	r2, #99	; 0x63
 8000b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b60:	f002 fce0 	bl	8003524 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b6a:	f7ff fede 	bl	800092a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b7c:	f002 fe9e 	bl	80038bc <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b86:	f7ff fed0 	bl	800092a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b8c:	f002 fd21 	bl	80035d2 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b96:	f7ff fec8 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000baa:	f003 fb67 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bb4:	f7ff feb9 	bl	800092a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	; 0x60
 8000bba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000bd0:	f002 fd60 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bda:	f7ff fea6 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000be0:	f000 f85a 	bl	8000c98 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3738      	adds	r7, #56	; 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000190 	.word	0x20000190
 8000bf0:	40000400 	.word	0x40000400

08000bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_TIM_Base_MspInit+0x94>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d13b      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_TIM_Base_MspInit+0x98>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_TIM_Base_MspInit+0x98>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_TIM_Base_MspInit+0x98>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <HAL_TIM_Base_MspInit+0xa0>)
 8000c22:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c26:	2205      	movs	r2, #5
 8000c28:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c58:	f000 fab4 	bl	80011c4 <HAL_DMA_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000c62:	f7ff fe62 	bl	800092a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8000c6c:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
 8000c78:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <HAL_TIM_Base_MspInit+0x9c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40000400 	.word	0x40000400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	200001dc 	.word	0x200001dc
 8000c94:	4002006c 	.word	0x4002006c

08000c98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_TIM_MspPostInit+0x64>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d11c      	bne.n	8000cf4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_TIM_MspPostInit+0x68>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_TIM_MspPostInit+0x68>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_TIM_MspPostInit+0x68>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cd2:	2340      	movs	r3, #64	; 0x40
 8000cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 fbd0 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d0a:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <MX_USART2_UART_Init+0x5c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d48:	f003 fb20 	bl	800438c <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d52:	f7ff fdea 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000224 	.word	0x20000224
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ac      	sub	sp, #176	; 0xb0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2288      	movs	r2, #136	; 0x88
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f004 f822 	bl	8004dce <memset>
  if(uartHandle->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <HAL_UART_MspInit+0xb0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13b      	bne.n	8000e0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fb85 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff fdbd 	bl	800092a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dba:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de0:	230c      	movs	r3, #12
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 fb44 	bl	8001494 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	37b0      	adds	r7, #176	; 0xb0
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40021000 	.word	0x40021000

08000e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff fe60 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f003 ffc9 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4e:	f7ff fc7f 	bl	8000750 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e60:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 8000e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e68:	200002b0 	.word	0x200002b0

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>

08000e6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f961 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f80e 	bl	8000ea0 <HAL_InitTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e001      	b.n	8000e94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e90:	f7ff fdd0 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_InitTick+0x6c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d023      	beq.n	8000efc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_InitTick+0x70>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_InitTick+0x6c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f96d 	bl	80011aa <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10f      	bne.n	8000ef6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d809      	bhi.n	8000ef0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f937 	bl	8001156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_InitTick+0x74>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e007      	b.n	8000f00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e004      	b.n	8000f00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e001      	b.n	8000f00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	200002ac 	.word	0x200002ac

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200002ac 	.word	0x200002ac

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff3e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa2 	bl	80010fc <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e098      	b.n	8001308 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b4d      	ldr	r3, [pc, #308]	; (8001314 <HAL_DMA_Init+0x150>)
 80011de:	429a      	cmp	r2, r3
 80011e0:	d80f      	bhi.n	8001202 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_DMA_Init+0x154>)
 80011ea:	4413      	add	r3, r2
 80011ec:	4a4b      	ldr	r2, [pc, #300]	; (800131c <HAL_DMA_Init+0x158>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	009a      	lsls	r2, r3, #2
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_DMA_Init+0x15c>)
 80011fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001200:	e00e      	b.n	8001220 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_DMA_Init+0x160>)
 800120a:	4413      	add	r3, r2
 800120c:	4a43      	ldr	r2, [pc, #268]	; (800131c <HAL_DMA_Init+0x158>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a42      	ldr	r2, [pc, #264]	; (8001328 <HAL_DMA_Init+0x164>)
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2202      	movs	r2, #2
 8001224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800123a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800127a:	d039      	beq.n	80012f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <HAL_DMA_Init+0x15c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d11a      	bne.n	80012bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <HAL_DMA_Init+0x168>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f003 031c 	and.w	r3, r3, #28
 8001292:	210f      	movs	r1, #15
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	4924      	ldr	r1, [pc, #144]	; (800132c <HAL_DMA_Init+0x168>)
 800129c:	4013      	ands	r3, r2
 800129e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_DMA_Init+0x168>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f003 031c 	and.w	r3, r3, #28
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	491d      	ldr	r1, [pc, #116]	; (800132c <HAL_DMA_Init+0x168>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
 80012ba:	e019      	b.n	80012f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_DMA_Init+0x16c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f003 031c 	and.w	r3, r3, #28
 80012c8:	210f      	movs	r1, #15
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	4917      	ldr	r1, [pc, #92]	; (8001330 <HAL_DMA_Init+0x16c>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_DMA_Init+0x16c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6859      	ldr	r1, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 031c 	and.w	r3, r3, #28
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	4911      	ldr	r1, [pc, #68]	; (8001330 <HAL_DMA_Init+0x16c>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40020407 	.word	0x40020407
 8001318:	bffdfff8 	.word	0xbffdfff8
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	40020000 	.word	0x40020000
 8001324:	bffdfbf8 	.word	0xbffdfbf8
 8001328:	40020400 	.word	0x40020400
 800132c:	400200a8 	.word	0x400200a8
 8001330:	400204a8 	.word	0x400204a8

08001334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f003 031c 	and.w	r3, r3, #28
 8001354:	2204      	movs	r2, #4
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d026      	beq.n	80013ae <HAL_DMA_IRQHandler+0x7a>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d021      	beq.n	80013ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 021c 	and.w	r2, r3, #28
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2104      	movs	r1, #4
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d071      	beq.n	8001488 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013ac:	e06c      	b.n	8001488 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 031c 	and.w	r3, r3, #28
 80013b6:	2202      	movs	r2, #2
 80013b8:	409a      	lsls	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d02e      	beq.n	8001420 <HAL_DMA_IRQHandler+0xec>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d029      	beq.n	8001420 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10b      	bne.n	80013f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 020a 	bic.w	r2, r2, #10
 80013e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f003 021c 	and.w	r2, r3, #28
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2102      	movs	r1, #2
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	2b00      	cmp	r3, #0
 8001414:	d038      	beq.n	8001488 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800141e:	e033      	b.n	8001488 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	f003 031c 	and.w	r3, r3, #28
 8001428:	2208      	movs	r2, #8
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d02a      	beq.n	800148a <HAL_DMA_IRQHandler+0x156>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d025      	beq.n	800148a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 020e 	bic.w	r2, r2, #14
 800144c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f003 021c 	and.w	r2, r3, #28
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001488:	bf00      	nop
 800148a:	bf00      	nop
}
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a2:	e17f      	b.n	80017a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2101      	movs	r1, #1
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8171 	beq.w	800179e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d005      	beq.n	80014d4 <HAL_GPIO_Init+0x40>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d130      	bne.n	8001536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800150a:	2201      	movs	r2, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f003 0201 	and.w	r2, r3, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b03      	cmp	r3, #3
 8001540:	d118      	bne.n	8001574 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001548:	2201      	movs	r2, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b03      	cmp	r3, #3
 800157e:	d017      	beq.n	80015b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d123      	bne.n	8001604 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	08da      	lsrs	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3208      	adds	r2, #8
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0203 	and.w	r2, r3, #3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80ac 	beq.w	800179e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_GPIO_Init+0x330>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	4a5e      	ldr	r2, [pc, #376]	; (80017c4 <HAL_GPIO_Init+0x330>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6613      	str	r3, [r2, #96]	; 0x60
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_GPIO_Init+0x330>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800165e:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <HAL_GPIO_Init+0x334>)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001688:	d025      	beq.n	80016d6 <HAL_GPIO_Init+0x242>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x338>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_GPIO_Init+0x23e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_GPIO_Init+0x33c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d019      	beq.n	80016ce <HAL_GPIO_Init+0x23a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x340>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0x236>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x344>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00d      	beq.n	80016c6 <HAL_GPIO_Init+0x232>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_GPIO_Init+0x348>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x22e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4a      	ldr	r2, [pc, #296]	; (80017e0 <HAL_GPIO_Init+0x34c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_GPIO_Init+0x22a>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x244>
 80016d6:	2300      	movs	r3, #0
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <HAL_GPIO_Init+0x334>)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_GPIO_Init+0x350>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800171a:	4a32      	ldr	r2, [pc, #200]	; (80017e4 <HAL_GPIO_Init+0x350>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_GPIO_Init+0x350>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001744:	4a27      	ldr	r2, [pc, #156]	; (80017e4 <HAL_GPIO_Init+0x350>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_GPIO_Init+0x350>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_GPIO_Init+0x350>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_GPIO_Init+0x350>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_GPIO_Init+0x350>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f ae78 	bne.w	80014a4 <HAL_GPIO_Init+0x10>
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000
 80017cc:	48000400 	.word	0x48000400
 80017d0:	48000800 	.word	0x48000800
 80017d4:	48000c00 	.word	0x48000c00
 80017d8:	48001000 	.word	0x48001000
 80017dc:	48001400 	.word	0x48001400
 80017e0:	48001800 	.word	0x48001800
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_PWREx_GetVoltageRange+0x18>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40007000 	.word	0x40007000

08001804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001812:	d130      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001814:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800181c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001820:	d038      	beq.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2232      	movs	r2, #50	; 0x32
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0c9b      	lsrs	r3, r3, #18
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001848:	e002      	b.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3b01      	subs	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185c:	d102      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f2      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001870:	d110      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e00f      	b.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800187e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001882:	d007      	beq.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000
 80018a8:	20000000 	.word	0x20000000
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e3ca      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c2:	4b97      	ldr	r3, [pc, #604]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018cc:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80e4 	beq.w	8001aac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <HAL_RCC_OscConfig+0x4a>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	f040 808b 	bne.w	8001a08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8087 	bne.w	8001a08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e3a2      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_RCC_OscConfig+0x7c>
 8001922:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192a:	e005      	b.n	8001938 <HAL_RCC_OscConfig+0x88>
 800192c:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001938:	4293      	cmp	r3, r2
 800193a:	d223      	bcs.n	8001984 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd55 	bl	80023f0 <RCC_SetFlashLatencyFromMSIRange>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e383      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	496d      	ldr	r1, [pc, #436]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	4968      	ldr	r1, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e025      	b.n	80019d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a65      	ldr	r2, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4960      	ldr	r1, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a2:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	495b      	ldr	r1, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fd15 	bl	80023f0 <RCC_SetFlashLatencyFromMSIRange>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e343      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d0:	f000 fc4a 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	4950      	ldr	r1, [pc, #320]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ec:	4a4e      	ldr	r2, [pc, #312]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 80019ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f0:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <HAL_RCC_OscConfig+0x27c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fa53 	bl	8000ea0 <HAL_InitTick>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d052      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	e327      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d032      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fa90 	bl	8000f40 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a24:	f7ff fa8c 	bl	8000f40 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e310      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4931      	ldr	r1, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	492c      	ldr	r1, [pc, #176]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e01a      	b.n	8001aac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a29      	ldr	r2, [pc, #164]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fa5d 	bl	8000f40 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fa59 	bl	8000f40 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e2dd      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x1da>
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d074      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x21a>
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d064      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d160      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e2ba      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x24a>
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e026      	b.n	8001b48 <HAL_RCC_OscConfig+0x298>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b02:	d115      	bne.n	8001b30 <HAL_RCC_OscConfig+0x280>
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a02      	ldr	r2, [pc, #8]	; (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e014      	b.n	8001b48 <HAL_RCC_OscConfig+0x298>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08004e40 	.word	0x08004e40
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	4ba0      	ldr	r3, [pc, #640]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a9f      	ldr	r2, [pc, #636]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b9d      	ldr	r3, [pc, #628]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a9c      	ldr	r2, [pc, #624]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f9f6 	bl	8000f40 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f9f2 	bl	8000f40 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e276      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2a8>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f9e2 	bl	8000f40 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff f9de 	bl	8000f40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e262      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2d0>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d060      	beq.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x310>
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d119      	bne.n	8001bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d116      	bne.n	8001bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x328>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e23f      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	4973      	ldr	r1, [pc, #460]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	e040      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d023      	beq.n	8001c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6e      	ldr	r2, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f99d 	bl	8000f40 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f999 	bl	8000f40 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e21d      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	495f      	ldr	r1, [pc, #380]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e018      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5c      	ldr	r2, [pc, #368]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f979 	bl	8000f40 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff f975 	bl	8000f40 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1f9      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c84:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	4a4a      	ldr	r2, [pc, #296]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f954 	bl	8000f40 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f950 	bl	8000f40 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1d4      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ef      	beq.n	8001c9c <HAL_RCC_OscConfig+0x3ec>
 8001cbc:	e01b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f937 	bl	8000f40 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f933 	bl	8000f40 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1b7      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ef      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80a6 	beq.w	8001e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d118      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d48:	f7ff f8fa 	bl	8000f40 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7ff f8f6 	bl	8000f40 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e17a      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4d8>
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d86:	e029      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d115      	bne.n	8001dbc <HAL_RCC_OscConfig+0x50c>
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	4b9c      	ldr	r3, [pc, #624]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4a9b      	ldr	r2, [pc, #620]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	4b98      	ldr	r3, [pc, #608]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	4a97      	ldr	r2, [pc, #604]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d016      	beq.n	8001e12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f8ac 	bl	8000f40 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7ff f8a8 	bl	8000f40 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e12a      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ed      	beq.n	8001dec <HAL_RCC_OscConfig+0x53c>
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f895 	bl	8000f40 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f891 	bl	8000f40 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e113      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e30:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ed      	bne.n	8001e1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b7a      	ldr	r3, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	4a79      	ldr	r2, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80fe 	beq.w	8002056 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	f040 80d0 	bne.w	8002004 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e64:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d130      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	3b01      	subs	r3, #1
 8001e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d127      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d11f      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea4:	2a07      	cmp	r2, #7
 8001ea6:	bf14      	ite	ne
 8001ea8:	2201      	movne	r2, #1
 8001eaa:	2200      	moveq	r2, #0
 8001eac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d113      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d06e      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	d069      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ad      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f08:	f7ff f81a 	bl	8000f40 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f816 	bl	8000f40 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e09a      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f22:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2e:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_RCC_OscConfig+0x784>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f50:	0852      	lsrs	r2, r2, #1
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0552      	lsls	r2, r2, #21
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f5c:	0852      	lsrs	r2, r2, #1
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	0652      	lsls	r2, r2, #25
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f68:	0912      	lsrs	r2, r2, #4
 8001f6a:	0452      	lsls	r2, r2, #17
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	4930      	ldr	r1, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f8c:	f7fe ffd8 	bl	8000f40 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe ffd4 	bl	8000f40 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e058      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb2:	e050      	b.n	8002056 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04f      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d148      	bne.n	8002056 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fdc:	f7fe ffb0 	bl	8000f40 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe ffac 	bl	8000f40 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e030      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x734>
 8002002:	e028      	b.n	8002056 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d023      	beq.n	8002052 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_RCC_OscConfig+0x780>)
 8002010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe ff93 	bl	8000f40 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	e00c      	b.n	8002038 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ff8f 	bl	8000f40 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d905      	bls.n	8002038 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e013      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
 8002030:	40021000 	.word	0x40021000
 8002034:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_OscConfig+0x7b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ec      	bne.n	800201e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x7b0>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4905      	ldr	r1, [pc, #20]	; (8002060 <HAL_RCC_OscConfig+0x7b0>)
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_OscConfig+0x7b4>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e001      	b.n	8002056 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	feeefffc 	.word	0xfeeefffc

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0e7      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4970      	ldr	r1, [pc, #448]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b6e      	ldr	r3, [pc, #440]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0cf      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4960      	ldr	r1, [pc, #384]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04c      	beq.n	8002180 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d121      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0a6      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	4b54      	ldr	r3, [pc, #336]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e09a      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211e:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e08e      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e086      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4943      	ldr	r1, [pc, #268]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe fef6 	bl	8000f40 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fef2 	bl	8000f40 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e06e      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	429a      	cmp	r2, r3
 800219a:	d208      	bcs.n	80021ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219c:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	492b      	ldr	r1, [pc, #172]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d210      	bcs.n	80021de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 0207 	bic.w	r2, r3, #7
 80021c4:	4923      	ldr	r1, [pc, #140]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e036      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4918      	ldr	r1, [pc, #96]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4910      	ldr	r1, [pc, #64]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221c:	f000 f824 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	490b      	ldr	r1, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1f4>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fe2d 	bl	8000ea0 <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	72fb      	strb	r3, [r7, #11]

  return status;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	08004e40 	.word	0x08004e40
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d121      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11e      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e004      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCC_GetSysClockFreq+0x114>)
 80022ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d134      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0xa6>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d003      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0xac>
 800230c:	e005      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 8002310:	617b      	str	r3, [r7, #20]
      break;
 8002312:	e005      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_GetSysClockFreq+0x114>)
 8002316:	617b      	str	r3, [r7, #20]
      break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	617b      	str	r3, [r7, #20]
      break;
 800231e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	3301      	adds	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	0e5b      	lsrs	r3, r3, #25
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	3301      	adds	r3, #1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002360:	69bb      	ldr	r3, [r7, #24]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	08004e58 	.word	0x08004e58
 8002378:	00f42400 	.word	0x00f42400
 800237c:	007a1200 	.word	0x007a1200

08002380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4904      	ldr	r1, [pc, #16]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08004e50 	.word	0x08004e50

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023c8:	f7ff ffda 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08004e50 	.word	0x08004e50

080023f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023fc:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002408:	f7ff f9ee 	bl	80017e8 <HAL_PWREx_GetVoltageRange>
 800240c:	6178      	str	r0, [r7, #20]
 800240e:	e014      	b.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	; 0x58
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002428:	f7ff f9de 	bl	80017e8 <HAL_PWREx_GetVoltageRange>
 800242c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d10b      	bne.n	800245a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d919      	bls.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2ba0      	cmp	r3, #160	; 0xa0
 800244c:	d902      	bls.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800244e:	2302      	movs	r3, #2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	e013      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002454:	2301      	movs	r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e010      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b80      	cmp	r3, #128	; 0x80
 800245e:	d902      	bls.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002460:	2303      	movs	r3, #3
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e00a      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d102      	bne.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800246c:	2302      	movs	r3, #2
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e004      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b70      	cmp	r3, #112	; 0x70
 8002476:	d101      	bne.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002478:	2301      	movs	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0207 	bic.w	r2, r3, #7
 8002484:	4909      	ldr	r1, [pc, #36]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d041      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024d4:	d02a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024da:	d824      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024e6:	d81e      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f0:	d010      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f2:	e018      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f4:	4b86      	ldr	r3, [pc, #536]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a85      	ldr	r2, [pc, #532]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002500:	e015      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fabb 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002512:	e00c      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3320      	adds	r3, #32
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fba6 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002524:	e003      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	74fb      	strb	r3, [r7, #19]
      break;
 800252a:	e000      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800252c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002534:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002542:	4973      	ldr	r1, [pc, #460]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800254a:	e001      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d041      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002560:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002564:	d02a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002566:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800256a:	d824      	bhi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800256c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002576:	d81e      	bhi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002580:	d010      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002582:	e018      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002584:	4b62      	ldr	r3, [pc, #392]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a61      	ldr	r2, [pc, #388]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002590:	e015      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa73 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 800259e:	4603      	mov	r3, r0
 80025a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a2:	e00c      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3320      	adds	r3, #32
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fb5e 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b4:	e003      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ba:	e000      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c4:	4b52      	ldr	r3, [pc, #328]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d2:	494f      	ldr	r1, [pc, #316]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025da:	e001      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a0 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	4a40      	ldr	r2, [pc, #256]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	; 0x58
 8002614:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002624:	4b3b      	ldr	r3, [pc, #236]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002630:	f7fe fc86 	bl	8000f40 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002636:	e009      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe fc82 	bl	8000f40 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	74fb      	strb	r3, [r7, #19]
        break;
 800264a:	e005      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ef      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d15c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01f      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d019      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fc41 	bl	8000f40 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	e00b      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fc3d 	bl	8000f40 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d902      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	74fb      	strb	r3, [r7, #19]
            break;
 80026d8:	e006      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ec      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fe:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002706:	e009      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
 800270c:	e006      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271c:	7c7b      	ldrb	r3, [r7, #17]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b9e      	ldr	r3, [pc, #632]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a9d      	ldr	r2, [pc, #628]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273a:	4b98      	ldr	r3, [pc, #608]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f023 0203 	bic.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	4994      	ldr	r1, [pc, #592]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800275c:	4b8f      	ldr	r3, [pc, #572]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f023 020c 	bic.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	498c      	ldr	r1, [pc, #560]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277e:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4983      	ldr	r1, [pc, #524]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a0:	4b7e      	ldr	r3, [pc, #504]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	497b      	ldr	r1, [pc, #492]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c2:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	4972      	ldr	r1, [pc, #456]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e4:	4b6d      	ldr	r3, [pc, #436]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	496a      	ldr	r1, [pc, #424]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	4961      	ldr	r1, [pc, #388]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002828:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	4959      	ldr	r1, [pc, #356]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002858:	4950      	ldr	r1, [pc, #320]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	4948      	ldr	r1, [pc, #288]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288e:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	493f      	ldr	r1, [pc, #252]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d028      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028be:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ce:	d106      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a31      	ldr	r2, [pc, #196]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028da:	60d3      	str	r3, [r2, #12]
 80028dc:	e011      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e6:	d10c      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f8c8 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d028      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292c:	d106      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002938:	60d3      	str	r3, [r2, #12]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f899 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d02b      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e014      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2101      	movs	r1, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f867 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	4928      	ldr	r1, [pc, #160]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ee:	d10d      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f844 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	74bb      	strb	r3, [r7, #18]
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3320      	adds	r3, #32
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f925 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4a:	490d      	ldr	r1, [pc, #52]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6e:	4904      	ldr	r1, [pc, #16]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a92:	4b75      	ldr	r3, [pc, #468]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a9e:	4b72      	ldr	r3, [pc, #456]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0203 	and.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d10d      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d047      	beq.n	8002b5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e044      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d018      	beq.n	8002b0a <RCCEx_PLLSAI1_Config+0x86>
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d825      	bhi.n	8002b28 <RCCEx_PLLSAI1_Config+0xa4>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <RCCEx_PLLSAI1_Config+0x62>
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d009      	beq.n	8002af8 <RCCEx_PLLSAI1_Config+0x74>
 8002ae4:	e020      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11d      	bne.n	8002b2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af6:	e01a      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af8:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b08:	e013      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b0a:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b16:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b26:	e006      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e004      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	430b      	orrs	r3, r1
 8002b54:	4944      	ldr	r1, [pc, #272]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d17d      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b60:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f9e8 	bl	8000f40 <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b72:	e009      	b.n	8002b88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b74:	f7fe f9e4 	bl	8000f40 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	73fb      	strb	r3, [r7, #15]
        break;
 8002b86:	e005      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ef      	bne.n	8002b74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d160      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba0:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	0211      	lsls	r1, r2, #8
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	0912      	lsrs	r2, r2, #4
 8002bb8:	0452      	lsls	r2, r2, #17
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	492a      	ldr	r1, [pc, #168]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	610b      	str	r3, [r1, #16]
 8002bc2:	e027      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d112      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6892      	ldr	r2, [r2, #8]
 8002bda:	0211      	lsls	r1, r2, #8
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6912      	ldr	r2, [r2, #16]
 8002be0:	0852      	lsrs	r2, r2, #1
 8002be2:	3a01      	subs	r2, #1
 8002be4:	0552      	lsls	r2, r2, #21
 8002be6:	430a      	orrs	r2, r1
 8002be8:	491f      	ldr	r1, [pc, #124]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	610b      	str	r3, [r1, #16]
 8002bee:	e011      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6892      	ldr	r2, [r2, #8]
 8002c00:	0211      	lsls	r1, r2, #8
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6952      	ldr	r2, [r2, #20]
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0652      	lsls	r2, r2, #25
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	4916      	ldr	r1, [pc, #88]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe f98e 	bl	8000f40 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c26:	e009      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c28:	f7fe f98a 	bl	8000f40 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	73fb      	strb	r3, [r7, #15]
          break;
 8002c3a:	e005      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4904      	ldr	r1, [pc, #16]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000

08002c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d10d      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c9e:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
       ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d047      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e044      	b.n	8002d42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d018      	beq.n	8002cf2 <RCCEx_PLLSAI2_Config+0x86>
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d825      	bhi.n	8002d10 <RCCEx_PLLSAI2_Config+0xa4>
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d002      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0x62>
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d009      	beq.n	8002ce0 <RCCEx_PLLSAI2_Config+0x74>
 8002ccc:	e020      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cce:	4b55      	ldr	r3, [pc, #340]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11d      	bne.n	8002d16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cde:	e01a      	b.n	8002d16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce0:	4b50      	ldr	r3, [pc, #320]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e013      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10f      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d0e:	e006      	b.n	8002d1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      break;
 8002d14:	e004      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	4939      	ldr	r1, [pc, #228]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d167      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d54:	f7fe f8f4 	bl	8000f40 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d5a:	e009      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d5c:	f7fe f8f0 	bl	8000f40 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d902      	bls.n	8002d70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d6e:	e005      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ef      	bne.n	8002d5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d14a      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6892      	ldr	r2, [r2, #8]
 8002d98:	0211      	lsls	r1, r2, #8
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	0912      	lsrs	r2, r2, #4
 8002da0:	0452      	lsls	r2, r2, #17
 8002da2:	430a      	orrs	r2, r1
 8002da4:	491f      	ldr	r1, [pc, #124]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	614b      	str	r3, [r1, #20]
 8002daa:	e011      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002db4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6892      	ldr	r2, [r2, #8]
 8002dbc:	0211      	lsls	r1, r2, #8
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6912      	ldr	r2, [r2, #16]
 8002dc2:	0852      	lsrs	r2, r2, #1
 8002dc4:	3a01      	subs	r2, #1
 8002dc6:	0652      	lsls	r2, r2, #25
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4916      	ldr	r1, [pc, #88]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe f8b0 	bl	8000f40 <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de2:	e009      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002de4:	f7fe f8ac 	bl	8000f40 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d902      	bls.n	8002df8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	73fb      	strb	r3, [r7, #15]
          break;
 8002df6:	e005      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e095      	b.n	8002f66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4a:	d009      	beq.n	8002e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
 8002e52:	e005      	b.n	8002e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fd98 	bl	80009b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ea0:	d902      	bls.n	8002ea8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e002      	b.n	8002eae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002eb6:	d007      	beq.n	8002ec8 <HAL_SPI_Init+0xa0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	ea42 0103 	orr.w	r1, r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	f003 0204 	and.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f44:	ea42 0103 	orr.w	r1, r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b088      	sub	sp, #32
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7e:	f7fd ffdf 	bl	8000f40 <HAL_GetTick>
 8002f82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d001      	beq.n	8002f98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
 8002f96:	e15c      	b.n	8003252 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x36>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e154      	b.n	8003252 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_SPI_Transmit+0x48>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e14d      	b.n	8003252 <HAL_SPI_Transmit+0x2e4>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d10f      	bne.n	800302a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003018:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003028:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d007      	beq.n	8003048 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003050:	d952      	bls.n	80030f8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_SPI_Transmit+0xf2>
 800305a:	8b7b      	ldrh	r3, [r7, #26]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d145      	bne.n	80030ec <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	881a      	ldrh	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	1c9a      	adds	r2, r3, #2
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003084:	e032      	b.n	80030ec <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	d112      	bne.n	80030ba <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030b8:	e018      	b.n	80030ec <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ba:	f7fd ff41 	bl	8000f40 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d803      	bhi.n	80030d2 <HAL_SPI_Transmit+0x164>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d102      	bne.n	80030d8 <HAL_SPI_Transmit+0x16a>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0b2      	b.n	8003252 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1c7      	bne.n	8003086 <HAL_SPI_Transmit+0x118>
 80030f6:	e083      	b.n	8003200 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Transmit+0x198>
 8003100:	8b7b      	ldrh	r3, [r7, #26]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d177      	bne.n	80031f6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d912      	bls.n	8003136 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	881a      	ldrh	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	1c9a      	adds	r2, r3, #2
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b02      	subs	r3, #2
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003134:	e05f      	b.n	80031f6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800315c:	e04b      	b.n	80031f6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d12b      	bne.n	80031c4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d912      	bls.n	800319c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	881a      	ldrh	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	1c9a      	adds	r2, r3, #2
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b02      	subs	r3, #2
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800319a:	e02c      	b.n	80031f6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031c2:	e018      	b.n	80031f6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c4:	f7fd febc 	bl	8000f40 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d803      	bhi.n	80031dc <HAL_SPI_Transmit+0x26e>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d102      	bne.n	80031e2 <HAL_SPI_Transmit+0x274>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e02d      	b.n	8003252 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ae      	bne.n	800315e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f947 	bl	8003498 <SPI_EndRxTxTransaction>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003250:	2300      	movs	r3, #0
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800326c:	f7fd fe68 	bl	8000f40 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	4413      	add	r3, r2
 800327a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800327c:	f7fd fe60 	bl	8000f40 <HAL_GetTick>
 8003280:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	015b      	lsls	r3, r3, #5
 8003288:	0d1b      	lsrs	r3, r3, #20
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003292:	e054      	b.n	800333e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d050      	beq.n	800333e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800329c:	f7fd fe50 	bl	8000f40 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d902      	bls.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d13d      	bne.n	800332e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ca:	d111      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d4:	d004      	beq.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d107      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f8:	d10f      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e017      	b.n	800335e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3b01      	subs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	429a      	cmp	r2, r3
 800335a:	d19b      	bne.n	8003294 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000

0800336c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800337e:	f7fd fddf 	bl	8000f40 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4413      	add	r3, r2
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800338e:	f7fd fdd7 	bl	8000f40 <HAL_GetTick>
 8003392:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800339c:	4b3d      	ldr	r3, [pc, #244]	; (8003494 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00da      	lsls	r2, r3, #3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	0d1b      	lsrs	r3, r3, #20
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033b4:	e060      	b.n	8003478 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033bc:	d107      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d050      	beq.n	8003478 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d6:	f7fd fdb3 	bl	8000f40 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d902      	bls.n	80033ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13d      	bne.n	8003468 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003404:	d111      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340e:	d004      	beq.n	800341a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003418:	d107      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003428:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003432:	d10f      	bne.n	8003454 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003452:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e010      	b.n	800348a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	3b01      	subs	r3, #1
 8003476:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d196      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff ff5b 	bl	800336c <SPI_WaitFifoStateUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e027      	b.n	800351c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fec0 	bl	800325c <SPI_WaitFlagStateUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e014      	b.n	800351c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff34 	bl	800336c <SPI_WaitFifoStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e000      	b.n	800351c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e049      	b.n	80035ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fb52 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fa74 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e049      	b.n	8003678 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f841 	bl	8003680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fa1d 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0ff      	b.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b14      	cmp	r3, #20
 80036be:	f200 80f0 	bhi.w	80038a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	080038a3 	.word	0x080038a3
 80036d0:	080038a3 	.word	0x080038a3
 80036d4:	080038a3 	.word	0x080038a3
 80036d8:	0800375d 	.word	0x0800375d
 80036dc:	080038a3 	.word	0x080038a3
 80036e0:	080038a3 	.word	0x080038a3
 80036e4:	080038a3 	.word	0x080038a3
 80036e8:	0800379f 	.word	0x0800379f
 80036ec:	080038a3 	.word	0x080038a3
 80036f0:	080038a3 	.word	0x080038a3
 80036f4:	080038a3 	.word	0x080038a3
 80036f8:	080037df 	.word	0x080037df
 80036fc:	080038a3 	.word	0x080038a3
 8003700:	080038a3 	.word	0x080038a3
 8003704:	080038a3 	.word	0x080038a3
 8003708:	08003821 	.word	0x08003821
 800370c:	080038a3 	.word	0x080038a3
 8003710:	080038a3 	.word	0x080038a3
 8003714:	080038a3 	.word	0x080038a3
 8003718:	08003861 	.word	0x08003861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa3a 	bl	8003b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
      break;
 800375a:	e0a5      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 faaa 	bl	8003cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
      break;
 800379c:	e084      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fb13 	bl	8003dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      break;
 80037dc:	e064      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fb7b 	bl	8003ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	61da      	str	r2, [r3, #28]
      break;
 800381e:	e043      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fbc4 	bl	8003fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0208 	orr.w	r2, r2, #8
 800383a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0204 	bic.w	r2, r2, #4
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800385e:	e023      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fc08 	bl	800407c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038a0:	e002      	b.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
      break;
 80038a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_TIM_ConfigClockSource+0x1c>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0b6      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x18a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d03e      	beq.n	8003994 <HAL_TIM_ConfigClockSource+0xd8>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	f200 8087 	bhi.w	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	f000 8086 	beq.w	8003a32 <HAL_TIM_ConfigClockSource+0x176>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d87f      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800392c:	2b70      	cmp	r3, #112	; 0x70
 800392e:	d01a      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xaa>
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d87b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 8003934:	2b60      	cmp	r3, #96	; 0x60
 8003936:	d050      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x11e>
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d877      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d03c      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0xfe>
 8003940:	2b50      	cmp	r3, #80	; 0x50
 8003942:	d873      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d058      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x13e>
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d86f      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d064      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d86b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d060      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d867      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05c      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003960:	2b10      	cmp	r3, #16
 8003962:	d05a      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15e>
 8003964:	e062      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003976:	f000 fc61 	bl	800423c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]
      break;
 8003992:	e04f      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039a4:	f000 fc4a 	bl	800423c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e03c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c6:	461a      	mov	r2, r3
 80039c8:	f000 fbbe 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2150      	movs	r1, #80	; 0x50
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fc17 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 80039d8:	e02c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 fbdd 	bl	80041a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2160      	movs	r1, #96	; 0x60
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fc07 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e01c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 fb9e 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fbf7 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e00c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f000 fbee 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003a2a:	e003      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d00f      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a43      	ldr	r2, [pc, #268]	; (8003b80 <TIM_Base_SetConfig+0x130>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a42      	ldr	r2, [pc, #264]	; (8003b84 <TIM_Base_SetConfig+0x134>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a41      	ldr	r2, [pc, #260]	; (8003b88 <TIM_Base_SetConfig+0x138>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <TIM_Base_SetConfig+0x13c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d01b      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a32      	ldr	r2, [pc, #200]	; (8003b80 <TIM_Base_SetConfig+0x130>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d017      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a31      	ldr	r2, [pc, #196]	; (8003b84 <TIM_Base_SetConfig+0x134>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	; (8003b88 <TIM_Base_SetConfig+0x138>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <TIM_Base_SetConfig+0x13c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2e      	ldr	r2, [pc, #184]	; (8003b90 <TIM_Base_SetConfig+0x140>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2d      	ldr	r2, [pc, #180]	; (8003b94 <TIM_Base_SetConfig+0x144>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0x9a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <TIM_Base_SetConfig+0x148>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00f      	beq.n	8003b48 <TIM_Base_SetConfig+0xf8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <TIM_Base_SetConfig+0x13c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_Base_SetConfig+0xf8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_Base_SetConfig+0x140>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0xf8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <TIM_Base_SetConfig+0x144>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0xf8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <TIM_Base_SetConfig+0x148>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f023 0201 	bic.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	611a      	str	r2, [r3, #16]
  }
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40013400 	.word	0x40013400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f023 0201 	bic.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 0302 	bic.w	r3, r3, #2
 8003be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <TIM_OC1_SetConfig+0x10c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00f      	beq.n	8003c1c <TIM_OC1_SetConfig+0x80>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <TIM_OC1_SetConfig+0x110>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_OC1_SetConfig+0x80>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <TIM_OC1_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_OC1_SetConfig+0x80>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <TIM_OC1_SetConfig+0x118>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC1_SetConfig+0x80>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <TIM_OC1_SetConfig+0x11c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10c      	bne.n	8003c36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0308 	bic.w	r3, r3, #8
 8003c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <TIM_OC1_SetConfig+0x10c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00f      	beq.n	8003c5e <TIM_OC1_SetConfig+0xc2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <TIM_OC1_SetConfig+0x110>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00b      	beq.n	8003c5e <TIM_OC1_SetConfig+0xc2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <TIM_OC1_SetConfig+0x114>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <TIM_OC1_SetConfig+0xc2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <TIM_OC1_SetConfig+0x118>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d003      	beq.n	8003c5e <TIM_OC1_SetConfig+0xc2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <TIM_OC1_SetConfig+0x11c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	621a      	str	r2, [r3, #32]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40013400 	.word	0x40013400
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f023 0210 	bic.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0320 	bic.w	r3, r3, #32
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <TIM_OC2_SetConfig+0x100>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_OC2_SetConfig+0x6c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <TIM_OC2_SetConfig+0x104>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10d      	bne.n	8003d44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <TIM_OC2_SetConfig+0x100>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00f      	beq.n	8003d6c <TIM_OC2_SetConfig+0xb0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <TIM_OC2_SetConfig+0x104>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_OC2_SetConfig+0xb0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <TIM_OC2_SetConfig+0x108>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_OC2_SetConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <TIM_OC2_SetConfig+0x10c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_OC2_SetConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <TIM_OC2_SetConfig+0x110>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d113      	bne.n	8003d94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <TIM_OC3_SetConfig+0xfc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC3_SetConfig+0x6a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <TIM_OC3_SetConfig+0x100>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10d      	bne.n	8003e56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <TIM_OC3_SetConfig+0xfc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00f      	beq.n	8003e7e <TIM_OC3_SetConfig+0xae>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <TIM_OC3_SetConfig+0x100>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_OC3_SetConfig+0xae>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <TIM_OC3_SetConfig+0x104>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_OC3_SetConfig+0xae>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <TIM_OC3_SetConfig+0x108>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC3_SetConfig+0xae>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <TIM_OC3_SetConfig+0x10c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d113      	bne.n	8003ea6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800

08003ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	031b      	lsls	r3, r3, #12
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <TIM_OC4_SetConfig+0xc0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00f      	beq.n	8003f64 <TIM_OC4_SetConfig+0x84>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <TIM_OC4_SetConfig+0xc4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_OC4_SetConfig+0x84>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <TIM_OC4_SetConfig+0xc8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_OC4_SetConfig+0x84>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <TIM_OC4_SetConfig+0xcc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC4_SetConfig+0x84>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <TIM_OC4_SetConfig+0xd0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d109      	bne.n	8003f78 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	019b      	lsls	r3, r3, #6
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800

08003fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ff8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a17      	ldr	r2, [pc, #92]	; (8004068 <TIM_OC5_SetConfig+0xb4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_OC5_SetConfig+0x7a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <TIM_OC5_SetConfig+0xb8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_OC5_SetConfig+0x7a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <TIM_OC5_SetConfig+0xbc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_OC5_SetConfig+0x7a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <TIM_OC5_SetConfig+0xc0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC5_SetConfig+0x7a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <TIM_OC5_SetConfig+0xc4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d109      	bne.n	8004042 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	051b      	lsls	r3, r3, #20
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <TIM_OC6_SetConfig+0xb8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00f      	beq.n	80040f8 <TIM_OC6_SetConfig+0x7c>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a17      	ldr	r2, [pc, #92]	; (8004138 <TIM_OC6_SetConfig+0xbc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_OC6_SetConfig+0x7c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <TIM_OC6_SetConfig+0xc0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_OC6_SetConfig+0x7c>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <TIM_OC6_SetConfig+0xc4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC6_SetConfig+0x7c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <TIM_OC6_SetConfig+0xc8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d109      	bne.n	800410c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40013400 	.word	0x40013400
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 030a 	bic.w	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 0210 	bic.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	031b      	lsls	r3, r3, #12
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e068      	b.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2e      	ldr	r2, [pc, #184]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d108      	bne.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01d      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004306:	d018      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00e      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d009      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10c      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40014000 	.word	0x40014000

0800438c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e040      	b.n	8004420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc fcd8 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fae0 	bl	8004998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f825 	bl	8004428 <UART_SetConfig>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e01b      	b.n	8004420 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb5f 	bl	8004adc <UART_CheckIdleState>
 800441e:	4603      	mov	r3, r0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b08a      	sub	sp, #40	; 0x28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4313      	orrs	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4ba4      	ldr	r3, [pc, #656]	; (80046e8 <UART_SetConfig+0x2c0>)
 8004458:	4013      	ands	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004460:	430b      	orrs	r3, r1
 8004462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a99      	ldr	r2, [pc, #612]	; (80046ec <UART_SetConfig+0x2c4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	4313      	orrs	r3, r2
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a90      	ldr	r2, [pc, #576]	; (80046f0 <UART_SetConfig+0x2c8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d126      	bne.n	8004500 <UART_SetConfig+0xd8>
 80044b2:	4b90      	ldr	r3, [pc, #576]	; (80046f4 <UART_SetConfig+0x2cc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0xd0>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <UART_SetConfig+0xa0>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e116      	b.n	800470e <UART_SetConfig+0x2e6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e112      	b.n	800470e <UART_SetConfig+0x2e6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e10e      	b.n	800470e <UART_SetConfig+0x2e6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e10a      	b.n	800470e <UART_SetConfig+0x2e6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e106      	b.n	800470e <UART_SetConfig+0x2e6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a7c      	ldr	r2, [pc, #496]	; (80046f8 <UART_SetConfig+0x2d0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d138      	bne.n	800457c <UART_SetConfig+0x154>
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d82d      	bhi.n	8004574 <UART_SetConfig+0x14c>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0xf8>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004555 	.word	0x08004555
 8004524:	08004575 	.word	0x08004575
 8004528:	08004575 	.word	0x08004575
 800452c:	08004575 	.word	0x08004575
 8004530:	08004565 	.word	0x08004565
 8004534:	08004575 	.word	0x08004575
 8004538:	08004575 	.word	0x08004575
 800453c:	08004575 	.word	0x08004575
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004575 	.word	0x08004575
 8004548:	08004575 	.word	0x08004575
 800454c:	08004575 	.word	0x08004575
 8004550:	0800456d 	.word	0x0800456d
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e0d8      	b.n	800470e <UART_SetConfig+0x2e6>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004562:	e0d4      	b.n	800470e <UART_SetConfig+0x2e6>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456a:	e0d0      	b.n	800470e <UART_SetConfig+0x2e6>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e0cc      	b.n	800470e <UART_SetConfig+0x2e6>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e0c8      	b.n	800470e <UART_SetConfig+0x2e6>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5e      	ldr	r2, [pc, #376]	; (80046fc <UART_SetConfig+0x2d4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d125      	bne.n	80045d2 <UART_SetConfig+0x1aa>
 8004586:	4b5b      	ldr	r3, [pc, #364]	; (80046f4 <UART_SetConfig+0x2cc>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d016      	beq.n	80045c2 <UART_SetConfig+0x19a>
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d818      	bhi.n	80045ca <UART_SetConfig+0x1a2>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d00a      	beq.n	80045b2 <UART_SetConfig+0x18a>
 800459c:	2b20      	cmp	r3, #32
 800459e:	d814      	bhi.n	80045ca <UART_SetConfig+0x1a2>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <UART_SetConfig+0x182>
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d008      	beq.n	80045ba <UART_SetConfig+0x192>
 80045a8:	e00f      	b.n	80045ca <UART_SetConfig+0x1a2>
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b0:	e0ad      	b.n	800470e <UART_SetConfig+0x2e6>
 80045b2:	2302      	movs	r3, #2
 80045b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b8:	e0a9      	b.n	800470e <UART_SetConfig+0x2e6>
 80045ba:	2304      	movs	r3, #4
 80045bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c0:	e0a5      	b.n	800470e <UART_SetConfig+0x2e6>
 80045c2:	2308      	movs	r3, #8
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c8:	e0a1      	b.n	800470e <UART_SetConfig+0x2e6>
 80045ca:	2310      	movs	r3, #16
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d0:	e09d      	b.n	800470e <UART_SetConfig+0x2e6>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4a      	ldr	r2, [pc, #296]	; (8004700 <UART_SetConfig+0x2d8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d125      	bne.n	8004628 <UART_SetConfig+0x200>
 80045dc:	4b45      	ldr	r3, [pc, #276]	; (80046f4 <UART_SetConfig+0x2cc>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045e6:	2bc0      	cmp	r3, #192	; 0xc0
 80045e8:	d016      	beq.n	8004618 <UART_SetConfig+0x1f0>
 80045ea:	2bc0      	cmp	r3, #192	; 0xc0
 80045ec:	d818      	bhi.n	8004620 <UART_SetConfig+0x1f8>
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d00a      	beq.n	8004608 <UART_SetConfig+0x1e0>
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	d814      	bhi.n	8004620 <UART_SetConfig+0x1f8>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <UART_SetConfig+0x1d8>
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d008      	beq.n	8004610 <UART_SetConfig+0x1e8>
 80045fe:	e00f      	b.n	8004620 <UART_SetConfig+0x1f8>
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e082      	b.n	800470e <UART_SetConfig+0x2e6>
 8004608:	2302      	movs	r3, #2
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460e:	e07e      	b.n	800470e <UART_SetConfig+0x2e6>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004616:	e07a      	b.n	800470e <UART_SetConfig+0x2e6>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e076      	b.n	800470e <UART_SetConfig+0x2e6>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004626:	e072      	b.n	800470e <UART_SetConfig+0x2e6>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a35      	ldr	r2, [pc, #212]	; (8004704 <UART_SetConfig+0x2dc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d12a      	bne.n	8004688 <UART_SetConfig+0x260>
 8004632:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <UART_SetConfig+0x2cc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004640:	d01a      	beq.n	8004678 <UART_SetConfig+0x250>
 8004642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004646:	d81b      	bhi.n	8004680 <UART_SetConfig+0x258>
 8004648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464c:	d00c      	beq.n	8004668 <UART_SetConfig+0x240>
 800464e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004652:	d815      	bhi.n	8004680 <UART_SetConfig+0x258>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <UART_SetConfig+0x238>
 8004658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465c:	d008      	beq.n	8004670 <UART_SetConfig+0x248>
 800465e:	e00f      	b.n	8004680 <UART_SetConfig+0x258>
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e052      	b.n	800470e <UART_SetConfig+0x2e6>
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e04e      	b.n	800470e <UART_SetConfig+0x2e6>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e04a      	b.n	800470e <UART_SetConfig+0x2e6>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e046      	b.n	800470e <UART_SetConfig+0x2e6>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e042      	b.n	800470e <UART_SetConfig+0x2e6>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <UART_SetConfig+0x2c4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d13a      	bne.n	8004708 <UART_SetConfig+0x2e0>
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <UART_SetConfig+0x2cc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800469c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a0:	d01a      	beq.n	80046d8 <UART_SetConfig+0x2b0>
 80046a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a6:	d81b      	bhi.n	80046e0 <UART_SetConfig+0x2b8>
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ac:	d00c      	beq.n	80046c8 <UART_SetConfig+0x2a0>
 80046ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b2:	d815      	bhi.n	80046e0 <UART_SetConfig+0x2b8>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <UART_SetConfig+0x298>
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	d008      	beq.n	80046d0 <UART_SetConfig+0x2a8>
 80046be:	e00f      	b.n	80046e0 <UART_SetConfig+0x2b8>
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c6:	e022      	b.n	800470e <UART_SetConfig+0x2e6>
 80046c8:	2302      	movs	r3, #2
 80046ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ce:	e01e      	b.n	800470e <UART_SetConfig+0x2e6>
 80046d0:	2304      	movs	r3, #4
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e01a      	b.n	800470e <UART_SetConfig+0x2e6>
 80046d8:	2308      	movs	r3, #8
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e016      	b.n	800470e <UART_SetConfig+0x2e6>
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e012      	b.n	800470e <UART_SetConfig+0x2e6>
 80046e8:	efff69f3 	.word	0xefff69f3
 80046ec:	40008000 	.word	0x40008000
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40004400 	.word	0x40004400
 80046fc:	40004800 	.word	0x40004800
 8004700:	40004c00 	.word	0x40004c00
 8004704:	40005000 	.word	0x40005000
 8004708:	2310      	movs	r3, #16
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a9f      	ldr	r2, [pc, #636]	; (8004990 <UART_SetConfig+0x568>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d17a      	bne.n	800480e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800471c:	2b08      	cmp	r3, #8
 800471e:	d824      	bhi.n	800476a <UART_SetConfig+0x342>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <UART_SetConfig+0x300>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800474d 	.word	0x0800474d
 800472c:	0800476b 	.word	0x0800476b
 8004730:	08004755 	.word	0x08004755
 8004734:	0800476b 	.word	0x0800476b
 8004738:	0800475b 	.word	0x0800475b
 800473c:	0800476b 	.word	0x0800476b
 8004740:	0800476b 	.word	0x0800476b
 8004744:	0800476b 	.word	0x0800476b
 8004748:	08004763 	.word	0x08004763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7fd fe24 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004750:	61f8      	str	r0, [r7, #28]
        break;
 8004752:	e010      	b.n	8004776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b8f      	ldr	r3, [pc, #572]	; (8004994 <UART_SetConfig+0x56c>)
 8004756:	61fb      	str	r3, [r7, #28]
        break;
 8004758:	e00d      	b.n	8004776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fd fd85 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 800475e:	61f8      	str	r0, [r7, #28]
        break;
 8004760:	e009      	b.n	8004776 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004766:	61fb      	str	r3, [r7, #28]
        break;
 8004768:	e005      	b.n	8004776 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004774:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80fb 	beq.w	8004974 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	429a      	cmp	r2, r3
 800478c:	d305      	bcc.n	800479a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	429a      	cmp	r2, r3
 8004798:	d903      	bls.n	80047a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047a0:	e0e8      	b.n	8004974 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2200      	movs	r2, #0
 80047a6:	461c      	mov	r4, r3
 80047a8:	4615      	mov	r5, r2
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	022b      	lsls	r3, r5, #8
 80047b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b8:	0222      	lsls	r2, r4, #8
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	6849      	ldr	r1, [r1, #4]
 80047be:	0849      	lsrs	r1, r1, #1
 80047c0:	2000      	movs	r0, #0
 80047c2:	4688      	mov	r8, r1
 80047c4:	4681      	mov	r9, r0
 80047c6:	eb12 0a08 	adds.w	sl, r2, r8
 80047ca:	eb43 0b09 	adc.w	fp, r3, r9
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047dc:	4650      	mov	r0, sl
 80047de:	4659      	mov	r1, fp
 80047e0:	f7fb fcf2 	bl	80001c8 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f2:	d308      	bcc.n	8004806 <UART_SetConfig+0x3de>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fa:	d204      	bcs.n	8004806 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e0b6      	b.n	8004974 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800480c:	e0b2      	b.n	8004974 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d15e      	bne.n	80048d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800481c:	2b08      	cmp	r3, #8
 800481e:	d828      	bhi.n	8004872 <UART_SetConfig+0x44a>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <UART_SetConfig+0x400>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800484d 	.word	0x0800484d
 800482c:	08004855 	.word	0x08004855
 8004830:	0800485d 	.word	0x0800485d
 8004834:	08004873 	.word	0x08004873
 8004838:	08004863 	.word	0x08004863
 800483c:	08004873 	.word	0x08004873
 8004840:	08004873 	.word	0x08004873
 8004844:	08004873 	.word	0x08004873
 8004848:	0800486b 	.word	0x0800486b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484c:	f7fd fda4 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004850:	61f8      	str	r0, [r7, #28]
        break;
 8004852:	e014      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7fd fdb6 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8004858:	61f8      	str	r0, [r7, #28]
        break;
 800485a:	e010      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800485c:	4b4d      	ldr	r3, [pc, #308]	; (8004994 <UART_SetConfig+0x56c>)
 800485e:	61fb      	str	r3, [r7, #28]
        break;
 8004860:	e00d      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fd fd01 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8004866:	61f8      	str	r0, [r7, #28]
        break;
 8004868:	e009      	b.n	800487e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486e:	61fb      	str	r3, [r7, #28]
        break;
 8004870:	e005      	b.n	800487e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800487c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d077      	beq.n	8004974 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005a      	lsls	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	441a      	add	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d916      	bls.n	80048ce <UART_SetConfig+0x4a6>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a6:	d212      	bcs.n	80048ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f023 030f 	bic.w	r3, r3, #15
 80048b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	b29a      	uxth	r2, r3
 80048be:	8afb      	ldrh	r3, [r7, #22]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	8afa      	ldrh	r2, [r7, #22]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e052      	b.n	8004974 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048d4:	e04e      	b.n	8004974 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d827      	bhi.n	800492e <UART_SetConfig+0x506>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x4bc>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004919 	.word	0x08004919
 80048f0:	0800492f 	.word	0x0800492f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800492f 	.word	0x0800492f
 80048fc:	0800492f 	.word	0x0800492f
 8004900:	0800492f 	.word	0x0800492f
 8004904:	08004927 	.word	0x08004927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fd fd46 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e014      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004910:	f7fd fd58 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8004914:	61f8      	str	r0, [r7, #28]
        break;
 8004916:	e010      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <UART_SetConfig+0x56c>)
 800491a:	61fb      	str	r3, [r7, #28]
        break;
 800491c:	e00d      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491e:	f7fd fca3 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8004922:	61f8      	str	r0, [r7, #28]
        break;
 8004924:	e009      	b.n	800493a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492a:	61fb      	str	r3, [r7, #28]
        break;
 800492c:	e005      	b.n	800493a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004938:	bf00      	nop
    }

    if (pclk != 0U)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d019      	beq.n	8004974 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	085a      	lsrs	r2, r3, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d909      	bls.n	800496e <UART_SetConfig+0x546>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d205      	bcs.n	800496e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e002      	b.n	8004974 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	40008000 	.word	0x40008000
 8004994:	00f42400 	.word	0x00f42400

08004998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01a      	beq.n	8004aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a96:	d10a      	bne.n	8004aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b098      	sub	sp, #96	; 0x60
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aec:	f7fc fa28 	bl	8000f40 <HAL_GetTick>
 8004af0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d12e      	bne.n	8004b5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f88c 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d021      	beq.n	8004b5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e062      	b.n	8004c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d149      	bne.n	8004c00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f856 	bl	8004c2c <UART_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d03c      	beq.n	8004c00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	623b      	str	r3, [r7, #32]
   return(result);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e6      	bne.n	8004b86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	617b      	str	r3, [r7, #20]
   return(result);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e011      	b.n	8004c24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3758      	adds	r7, #88	; 0x58
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	e04f      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d04b      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fc f97b 	bl	8000f40 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e04e      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d037      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d034      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d031      	beq.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d110      	bne.n	8004caa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f838 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e029      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb8:	d111      	bne.n	8004cde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f81e 	bl	8004d06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e00f      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	bf0c      	ite	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	2300      	movne	r3, #0
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d0a0      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b095      	sub	sp, #84	; 0x54
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d118      	bne.n	8004dae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	647b      	str	r3, [r7, #68]	; 0x44
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	613b      	str	r3, [r7, #16]
   return(result);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dc2:	bf00      	nop
 8004dc4:	3754      	adds	r7, #84	; 0x54
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <memset>:
 8004dce:	4402      	add	r2, r0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d100      	bne.n	8004dd8 <memset+0xa>
 8004dd6:	4770      	bx	lr
 8004dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8004ddc:	e7f9      	b.n	8004dd2 <memset+0x4>
	...

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4d0d      	ldr	r5, [pc, #52]	; (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2600      	movs	r6, #0
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4d0b      	ldr	r5, [pc, #44]	; (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	; (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 f818 	bl	8004e28 <_init>
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08004e90 	.word	0x08004e90
 8004e1c:	08004e90 	.word	0x08004e90
 8004e20:	08004e90 	.word	0x08004e90
 8004e24:	08004e94 	.word	0x08004e94

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr
